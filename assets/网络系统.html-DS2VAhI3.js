import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as i,d as a}from"./app-CGyb9mVk.js";const t={},c=a(`<h2 id="网络系统" tabindex="-1"><a class="header-anchor" href="#网络系统"><span>网络系统</span></a></h2><h3 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h3><p>DMA技术：直接内存访问技术，将数据从I/O设备缓冲区拷贝到PageCache的指挥权交给DMA控制器；通常块设备有DMA控制器</p><p>但是从PageCache拷贝到用户缓冲区的操作还是要CPU亲自来</p><p>内核缓冲区=PageCache=磁盘高速缓存</p><p>是否使用PageCache的I/O操作分类：</p><ul><li>缓存I/O：传输小文件 <ul><li>零拷贝技术</li></ul></li><li>直接I/O：绕过PageCache直接将磁盘数据拷贝到用户态缓冲区；传输大文件 <ul><li>对于磁盘，异步I/O只支持直接I/O</li><li>大文件传输方案：异步I/O+直接I/O</li></ul></li></ul><h3 id="零拷贝技术" tabindex="-1"><a class="header-anchor" href="#零拷贝技术"><span>零拷贝技术</span></a></h3><p>适用于在处理层无需对数据进行加工（比如压缩）的文件发送</p><p>服务端提供文件传输功能：</p><ul><li>传统的文件传输：2次系统调用（read、write）、4次上下文切换、4次拷贝（2次DMA、2次CPU） <ul><li>目标：磁盘到网卡</li><li>中间层：PageCache和socket缓冲区</li><li>处理层：用户态进程的用户缓冲区</li></ul></li><li>mmap+write：2次系统调用（read、write）、4次上下文切换、3次拷贝（2次DMA、1次CPU） <ul><li>PageCache中的数据映射到用户空间，减少1次CPU拷贝</li></ul></li><li>sendfile：1次系统调用（sendfile）、2次上下文切换、3次拷贝 <ul><li>1次CPU拷贝把PageCache里的数据拷贝到 socket 缓冲区，不用拷贝到用户态</li></ul></li><li>支持SG-DMA技术的sendfile（Linux2.1以上）：1次系统调用（sendfile）、2次上下文切换、2次拷贝 <ul><li>直接将PageCache中数据拷贝到网卡的缓冲区，不用拷贝到socket缓冲区</li></ul></li></ul><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><ul><li><p>Kafka：Java NIO 库里的 <code>transferTo</code> ，调用<code>sendfile()</code> ，使用零拷贝技术</p></li><li><p>nginx：sendfile配置项</p><ul><li><p>可以根据文件大小来配置不同方案，文件小于等于<code>directio</code>的值时使用零拷贝技术，否则使用异步I/O+直接I/O</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>location /video/ { 
    sendfile on; 
    aio on; 
    directio 1024m; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="i-o多路复用" tabindex="-1"><a class="header-anchor" href="#i-o多路复用"><span>I/O多路复用</span></a></h3><p>基于事件驱动的IO多路复用；将所有的请求交给一个单独的线程管理，此线程被称之为事件循环线程</p><p>应用场景：</p><ul><li>Redis是一个典型的单线程基于事件驱动的内存数据库</li><li>node.js</li><li>nginx</li><li>netty</li></ul><h4 id="select-poll" tabindex="-1"><a class="header-anchor" href="#select-poll"><span>select/poll</span></a></h4><p>select：2次遍历2次拷贝</p><ul><li>每次在用户和内核之间全量传入传出所有socket集合，连接越多越浪费时间</li><li>内核不会直接返回就绪的socket，而是在全量的socket集合上对就绪的socket打上标记</li><li>用户空间得到socket集合之后遍历获取</li><li>只支持水平触发（状态达到，高电平/低电平时触发） <ul><li>只要有事件就绪未处理就会通知用户态处理</li></ul></li></ul><h4 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll"><span>epoll</span></a></h4><p>e是指event，是事件驱动的</p><ul><li>在内核中维护一颗红黑树来管理文件描述符集合fdset(file description set），再维护一个就绪链表来存储已触发的文件</li><li>使用事件触发机制，在内核中维护就绪链表来存储已触发/待处理的文件，通过epoll_wait复制给用户态 <ul><li>支持边缘触发和水平触发 <ul><li>边缘触发（状态改变） <ul><li>只在事件第一次就绪的时候通知用户态处理</li><li>一般和非阻塞I/O一起使用，因为需要一次性读写完成，所以使用循环读写，所以最后没有数据可读写时不应该阻塞</li></ul></li></ul></li></ul></li></ul><p>流程：</p><ul><li>epoll_create</li><li>epoll_ctl</li><li>epoll_wait</li></ul><h4 id="select和poll的区别" tabindex="-1"><a class="header-anchor" href="#select和poll的区别"><span>select和poll的区别</span></a></h4><p>select使用固定长度的数据结构（比如数组、BitsMap）来存储关注的文件描述符集合，有最大连接数限制，默认1024</p><p>poll使用不固定长度的数据结构（比如链表）来存储关注的文件描述符集合，没有最大连接数限制（也会收到系统文件描述符数量限制）</p><h4 id="select和epoll的区别" tabindex="-1"><a class="header-anchor" href="#select和epoll的区别"><span>select和epoll的区别</span></a></h4><ol><li><p>效率</p><p>select每次都要复制所有的文件描述符集合</p><p>epoll在内核中维护一颗红黑树来管理文件描述符集合，再维护一个就绪链表来存储已触发的文件</p></li><li><p>触发方式</p><p>select只支持水平触发模式</p><p>epoll支持水平触发和边缘触发模式</p></li><li><p>参数</p><p><code>select</code> 的参数是三个文件描述符集合，分别是读、写和异常事件的文件描述符集合</p><p><code>epoll</code> 使用一个文件描述符，通过 <code>epoll_ctl</code> 函数来注册文件描述符，通过 <code>epoll_wait</code> 函数等待文件描述符就绪事件</p></li><li><p>支持数量</p><p>select一般支持1024个文件描述符</p><p>epoll没有明确数量限制</p></li></ol>`,30),o=[c];function p(s,n){return i(),l("div",null,o)}const h=e(t,[["render",p],["__file","网络系统.html.vue"]]),u=JSON.parse(`{"path":"/backend/cs-base/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F.html","title":"网络系统","lang":"zh-CN","frontmatter":{"title":"网络系统","order":5,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"网络系统 基础知识 DMA技术：直接内存访问技术，将数据从I/O设备缓冲区拷贝到PageCache的指挥权交给DMA控制器；通常块设备有DMA控制器 但是从PageCache拷贝到用户缓冲区的操作还是要CPU亲自来 内核缓冲区=PageCache=磁盘高速缓存 是否使用PageCache的I/O操作分类： 缓存I/O：传输小文件 零拷贝技术 直接I/O...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/cs-base/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"网络系统"}],["meta",{"property":"og:description","content":"网络系统 基础知识 DMA技术：直接内存访问技术，将数据从I/O设备缓冲区拷贝到PageCache的指挥权交给DMA控制器；通常块设备有DMA控制器 但是从PageCache拷贝到用户缓冲区的操作还是要CPU亲自来 内核缓冲区=PageCache=磁盘高速缓存 是否使用PageCache的I/O操作分类： 缓存I/O：传输小文件 零拷贝技术 直接I/O..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"网络系统","slug":"网络系统","link":"#网络系统","children":[{"level":3,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[]},{"level":3,"title":"零拷贝技术","slug":"零拷贝技术","link":"#零拷贝技术","children":[]},{"level":3,"title":"I/O多路复用","slug":"i-o多路复用","link":"#i-o多路复用","children":[]}]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":3.97,"words":1190},"filePathRelative":"backend/cs-base/操作系统/网络系统.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{h as comp,u as data};
