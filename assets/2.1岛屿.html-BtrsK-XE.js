import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-mxWX-y-j.js";const p={},e=t(`<h1 id="岛屿题目" tabindex="-1"><a class="header-anchor" href="#岛屿题目"><span>岛屿题目</span></a></h1><p><strong>核心考点：用 DFS算法遍历二维数组</strong>。</p><h3 id="基本框架" tabindex="-1"><a class="header-anchor" href="#基本框架"><span>基本框架</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 方向数组，分别代表上、下、左、右</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dirs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> m <span class="token operator">||</span> j <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 超出索引边界</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 已遍历过 (i, j)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 进入节点 (i, j)</span>
    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 递归遍历上下左右的节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> next_i <span class="token operator">=</span> i <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> next_j <span class="token operator">=</span> j <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> next_i<span class="token punctuation">,</span> next_j<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 离开节点 (i, j)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于FloodFill算法</p><p><a href="https://labuladong.online/algo/frequency-interview/island-dfs-summary/" target="_blank" rel="noopener noreferrer">所有岛屿题目</a></p><ol><li><p>岛屿数量</p></li><li><p>封闭岛屿数量：在1的基础上，边缘的岛屿不算，需要先淹掉</p></li><li><p>飞地的数量：和2相似，先把靠边的陆地淹掉，然后去数剩下的陆地数量就行了</p></li><li><p>统计子岛屿的数量：正难则反，把那些不可能是子岛的岛屿排除掉，剩下的就是子岛，再统计岛屿的数量即可（即1）</p><p><strong>如果岛屿 <code>B</code> 中存在一片陆地，在岛屿 <code>A</code> 的对应位置是海水，那么岛屿 <code>B</code> 就不是岛屿 <code>A</code> 的子岛</strong>。</p></li><li><p>不同岛屿数量：回溯算法</p><p>https://labuladong.online/algo/frequency-interview/island-dfs-summary/#%E4%B8%8D%E5%90%8C%E7%9A%84%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F</p><p>HashSet&lt;String&gt;</p><p>StringBuilder sb = new StringBuilder()</p></li></ol>`,7),o=[e];function c(i,l){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2.1岛屿.html.vue"]]),d=JSON.parse('{"path":"/algorithm/Hot100/2.1%E5%B2%9B%E5%B1%BF.html","title":"图-岛屿","lang":"zh-CN","frontmatter":{"title":"图-岛屿","order":7,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"岛屿题目 核心考点：用 DFS算法遍历二维数组。 基本框架 基于FloodFill算法 所有岛屿题目 岛屿数量 封闭岛屿数量：在1的基础上，边缘的岛屿不算，需要先淹掉 飞地的数量：和2相似，先把靠边的陆地淹掉，然后去数剩下的陆地数量就行了 统计子岛屿的数量：正难则反，把那些不可能是子岛的岛屿排除掉，剩下的就是子岛，再统计岛屿的数量即可（即1） 如果岛屿...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/algorithm/Hot100/2.1%E5%B2%9B%E5%B1%BF.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"图-岛屿"}],["meta",{"property":"og:description","content":"岛屿题目 核心考点：用 DFS算法遍历二维数组。 基本框架 基于FloodFill算法 所有岛屿题目 岛屿数量 封闭岛屿数量：在1的基础上，边缘的岛屿不算，需要先淹掉 飞地的数量：和2相似，先把靠边的陆地淹掉，然后去数剩下的陆地数量就行了 统计子岛屿的数量：正难则反，把那些不可能是子岛的岛屿排除掉，剩下的就是子岛，再统计岛屿的数量即可（即1） 如果岛屿..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:39:54.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:39:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图-岛屿\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:39:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":3,"title":"基本框架","slug":"基本框架","link":"#基本框架","children":[]}],"git":{"createdTime":1715670016000,"updatedTime":1715672394000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":2}]},"readingTime":{"minutes":1.23,"words":369},"filePathRelative":"algorithm/Hot100/2.1岛屿.md","localizedDate":"2024年5月14日","autoDesc":true}');export{k as comp,d as data};
