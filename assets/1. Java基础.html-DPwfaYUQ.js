import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,d as e}from"./app-Bx3-ot4b.js";const t={},l=e(`<h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><h3 id="jvm、jre、jdk区别" tabindex="-1"><a class="header-anchor" href="#jvm、jre、jdk区别"><span>JVM、JRE、JDK区别</span></a></h3><p>JDK 创建和编译 Java 程序的开发套件 = JRE + java development tool（javac：编译器、javadoc：文档注释工具、jdb：调试器、javap：反编译工具）</p><ul><li>JRE 是 Java 运行时环境，主要包括JVM和Java基础类库（Java Class Library) <ul><li>JVM 是运行 Java 字节码的虚拟机</li></ul></li></ul><p>JDK9开始不再是统一的JRE，可以通过jlink工具创建更小的Runtime JRE</p><h3 id="java的代码执行技术" tabindex="-1"><a class="header-anchor" href="#java的代码执行技术"><span>Java的代码执行技术</span></a></h3><ul><li>JIT：Just-in-Time compilation 运行时编译热点代码，保存编译后的机器码，直接使用 <ul><li>根据代码执行情况收集信息作出优化，因此执行次数越多，速度越快</li></ul></li><li>AOT：Ahead of Time Compilation（JDK9引入的静态编译） <ul><li>优点：避免JIT预热等开销，提高Java程序启动速度；打包体积小，减少内存占用；增强安全性（不容易被反编译和修改）</li><li>为什么不全用AOT：无法支持Java部分动态特性，如反射、动态代理、动态加载、JNI（Java Native Interface)</li></ul></li></ul><h3 id="java和c-区别" tabindex="-1"><a class="header-anchor" href="#java和c-区别"><span>Java和C++区别</span></a></h3><ul><li><p>Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态</p></li><li><p>Java更安全：</p><ul><li>不提供指针直接访问内存，有自动内存管理机制</li><li>Java不支持类的多重继承，支持接口的多继承</li><li>重载（Java不支持操作符重载，除了String的+）</li></ul></li><li><p>Java是编译与解释并存的语言</p></li><li><p>Java平台无关</p></li></ul><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><h3 id="基本数据类型和包装类型的区别" tabindex="-1"><a class="header-anchor" href="#基本数据类型和包装类型的区别"><span>基本数据类型和包装类型的区别</span></a></h3><ol><li><p>存储方式（不是基本数据类型都存放在栈中！）</p><p>基本数据类型的局部变量：栈，局部变量表</p><p>基本数据类型的成员变量（非static）：堆</p><p>包装类型是对象类型，几乎所有对象存储在堆中</p><ul><li>JIT优化会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存</li></ul></li><li><p>默认值：基本数据类型有默认值，包装类型是对象，默认值为null</p></li><li><p>占用空间：基本数据类型占用空间小</p></li><li><p>用途：基本数据类型不能用于泛型，但包装类型可以</p></li><li><p>比较方式：包装类型对象值的比较用equals，==比较的是对象地址</p></li></ol><h3 id="包装类型的缓存机制" tabindex="-1"><a class="header-anchor" href="#包装类型的缓存机制"><span>包装类型的缓存机制</span></a></h3><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> ： <strong>[-128，127]</strong> 的相应类型的缓存数据</p><p><code>Character</code> ： <strong>[0,127]</strong> 的缓存数据</p><p><code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>。</p><p>自动拆装箱：Integer.valueof(), Integer.intValue()</p><h3 id="bigdecimal和biginteger" tabindex="-1"><a class="header-anchor" href="#bigdecimal和biginteger"><span>BigDecimal和BigInteger</span></a></h3><p>解决浮点数精度丢失问题：使用BigDecimal（内部实现使用BigInteger，加入了小数位）</p><ul><li>使用compareTo方法来比较 <ul><li>equals除了比较值，还会比较精度（scale）</li></ul></li></ul><p>超过long的数据：使用BigInteger，内部实现是 int[]</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h3 id="成员变量和局部变量的区别" tabindex="-1"><a class="header-anchor" href="#成员变量和局部变量的区别"><span>成员变量和局部变量的区别</span></a></h3><ol><li>语法：局部变量不能被访问控制符和static修饰；两者都可以被final修饰</li><li>存储方式：局部变量存在栈中，非static成员变量存在堆中</li><li>生存时间：局部变量跟随方法，成员变量跟随对象/类</li><li>是否自动赋默认值：局部变量不会自动赋默认值，成员变量会赋默认值</li></ol><h3 id="静态变量的作用" tabindex="-1"><a class="header-anchor" href="#静态变量的作用"><span>静态变量的作用</span></a></h3><p>多个类共享同一个静态变量，只用分配一次内存，节省内存，方便管理</p><h3 id="字符型常量和字符串常量的区别" tabindex="-1"><a class="header-anchor" href="#字符型常量和字符串常量的区别"><span>字符型常量和字符串常量的区别</span></a></h3><ol><li><p>形式：单引号vs双引号</p></li><li><p>含义：字符型常量是一个整型值，可以参与表达式运算；字符串常量是地址值</p></li><li><p>占用空间：char两个字节（16位），String若干字节</p><p>String占用的字节数取决于字符编码格式：</p><ul><li><code>utf8</code> :英文占 1 字节，中文占 3 字节</li><li><code>gbk</code>：英文占 1 字节，中文占 2 字节</li></ul></li></ol><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="重写和重载的区别" tabindex="-1"><a class="header-anchor" href="#重写和重载的区别"><span>重写和重载的区别</span></a></h3><p>重载：同名方法根据传参不同执行不同处理逻辑；编译阶段</p><p>重写：子类对父类方法的重新编写；运行阶段</p><ul><li>两同两小一大 <ul><li>两同：方法名、参数列表</li><li>返回值、异常</li><li>访问权限</li></ul></li></ul><h3 id="可变长参数" tabindex="-1"><a class="header-anchor" href="#可变长参数"><span>可变长参数</span></a></h3><p>String... args（底层实现是数组）</p><p>支持0个/多个参数，优先匹配固定参数</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><h3 id="string、stringbuilder、stringbuffer" tabindex="-1"><a class="header-anchor" href="#string、stringbuilder、stringbuffer"><span>String、StringBuilder、StringBuffer</span></a></h3><ol><li>操作少量的数据: <code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: <code>StringBuilder</code> （线程不安全，没有加同步锁）</li><li>多线程操作字符串缓冲区下操作大量数据: <code>StringBuffer</code>（线程安全，加了同步锁，但是慢）</li></ol><h3 id="string为什么是不可变的" tabindex="-1"><a class="header-anchor" href="#string为什么是不可变的"><span>String为什么是不可变的</span></a></h3><p>保存字符串的数组被 <code>final</code> 修饰且为私有的，并且<code>String</code> 类没有提供/暴露修改这个字符串的方法。</p><h3 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h3><p>在JDK9之前，使用+会产生大量StringBuilder临时对象来完成拼接，所以应该自己使用StringBuilder提高效率</p><h3 id="字符串常量池的作用" tabindex="-1"><a class="header-anchor" href="#字符串常量池的作用"><span>字符串常量池的作用</span></a></h3><p>避免字符串的重复创建，提升性能和减少内存消耗</p><h3 id="string-s1-new-string-abc-会创建几个对象" tabindex="-1"><a class="header-anchor" href="#string-s1-new-string-abc-会创建几个对象"><span>String s1 = new String(&quot;abc&quot;);会创建几个对象</span></a></h3><p>1/2个：</p><ul><li>常量池中有“abc”，也不会直接返回常量池中的字符串的引用，而是会直接堆中直接创建一个新的字符串对象</li><li>如果常量池中没有“abc”，会在堆上创建两个字符串对象，并在字符串常量池中添加其中一个字符串的引用</li></ul><h3 id="string-intern-方法的作用" tabindex="-1"><a class="header-anchor" href="#string-intern-方法的作用"><span>String.intern()方法的作用</span></a></h3><p>这是一个native方法，返回常量池中的字符串对象的引用（如果没有的话会创建再返回）</p><h3 id="常量折叠是什么" tabindex="-1"><a class="header-anchor" href="#常量折叠是什么"><span>常量折叠是什么</span></a></h3><p>把编译期间能够确定的常量表达式的值求出来作为常量嵌在最终生成的代码中：</p><ul><li>基本数据类型常量和字符串常量</li><li>final修饰的基本数据类型变量和字符串变量</li><li>基本数据类型的加减乘除、位运算</li><li>上述两种字符串的+</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>
<span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>

<span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span><span class="token comment">// 常量池中的对象</span>
<span class="token class-name">String</span> d <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment">// 常量池中的对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用的值在编译期间无法确定</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span><span class="token comment">// 常量池中的对象</span>
<span class="token class-name">String</span> d <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment">// 在堆上创建的新的对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="spi是什么-优缺点" tabindex="-1"><a class="header-anchor" href="#spi是什么-优缺点"><span>SPI是什么？优缺点？</span></a></h3><p>API是服务提供方实现的，让使用者调用</p><p>SPI是使用者定义了的接口，让提供服务方按照这个接口提供具体实现</p><p>优点：灵活</p><p>缺点：需要遍历加载所有实现类，效率低</p><h3 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化"><span>序列化和反序列化</span></a></h3><p>定义：二进制字节流和数据结构/对象之间的转换</p><ul><li>这里用数据结构是因为C++中还有struct，Java中就都是对象</li></ul><p>序列化协议属于应用层</p><p><code>transient</code>关键字：修饰不想进行序列化的变量</p><ul><li>只能修饰变量，不能修饰类和方法</li><li>反序列化后变量值被置为对应类型默认值</li></ul><p>static变量不属于任何对象，不会被序列化</p><h3 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h3><p>syntactic sugar</p><p>JVM虚拟机不支持语法糖，支持语法糖的是编译器：在编译阶段转换为基本语法<code>desugar</code></p><p>常见语法糖：</p><ul><li>for-each</li><li>泛型 <ul><li>desugar的方式是类型擦除（擦除所有的类型参数）</li><li>虚拟机中没有泛型</li></ul></li><li>自动拆装箱 <ul><li>装箱（基础数据类型变为封装类）：Integer i = Integer.valueof(10);</li><li>拆箱（封装类变为基础数据类型）：int n = i.intValue();</li></ul></li><li>变长参数 <ul><li>实际上就是数组</li></ul></li><li>枚举 <ul><li>编译器会自动创建一个<code>final</code>类型的类继承<code>Enum</code>类</li></ul></li><li>内部类 <ul><li>编译后内部类会有一个单独的字节码文件：<code>outer$inner.class</code></li></ul></li><li>条件编译 <ul><li>非常有限，只能通判断条件为常量的if语句实现，自动消除判断条件恒为false的代码</li></ul></li><li>lambda 表达式：匿名函数，可以作为参数传递 <ul><li>可以用来实现函数式接口（函数式接口是有且仅有一个抽象方法，但是可以有多个非抽象方法的接口）</li></ul></li></ul><p>容易出错的点：</p><ul><li><code>Iterator</code> 在工作时不允许被迭代的对象被改变，拥有一个mutex锁</li><li>泛型类的静态变量是共享的，只有一个</li></ul>`,76),i=[l];function p(o,c){return s(),n("div",null,i)}const d=a(t,[["render",p],["__file","1. Java基础.html.vue"]]),h=JSON.parse(`{"path":"/backend/java/1.%20Java%E5%9F%BA%E7%A1%80.html","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","order":1,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"基础概念 JVM、JRE、JDK区别 JDK 创建和编译 Java 程序的开发套件 = JRE + java development tool（javac：编译器、javadoc：文档注释工具、jdb：调试器、javap：反编译工具） JRE 是 Java 运行时环境，主要包括JVM和Java基础类库（Java Class Library) JVM 是...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/java/1.%20Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"基础概念 JVM、JRE、JDK区别 JDK 创建和编译 Java 程序的开发套件 = JRE + java development tool（javac：编译器、javadoc：文档注释工具、jdb：调试器、javap：反编译工具） JRE 是 Java 运行时环境，主要包括JVM和Java基础类库（Java Class Library) JVM 是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[{"level":3,"title":"JVM、JRE、JDK区别","slug":"jvm、jre、jdk区别","link":"#jvm、jre、jdk区别","children":[]},{"level":3,"title":"Java的代码执行技术","slug":"java的代码执行技术","link":"#java的代码执行技术","children":[]},{"level":3,"title":"Java和C++区别","slug":"java和c-区别","link":"#java和c-区别","children":[]}]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[{"level":3,"title":"基本数据类型和包装类型的区别","slug":"基本数据类型和包装类型的区别","link":"#基本数据类型和包装类型的区别","children":[]},{"level":3,"title":"包装类型的缓存机制","slug":"包装类型的缓存机制","link":"#包装类型的缓存机制","children":[]},{"level":3,"title":"BigDecimal和BigInteger","slug":"bigdecimal和biginteger","link":"#bigdecimal和biginteger","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"成员变量和局部变量的区别","slug":"成员变量和局部变量的区别","link":"#成员变量和局部变量的区别","children":[]},{"level":3,"title":"静态变量的作用","slug":"静态变量的作用","link":"#静态变量的作用","children":[]},{"level":3,"title":"字符型常量和字符串常量的区别","slug":"字符型常量和字符串常量的区别","link":"#字符型常量和字符串常量的区别","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"重写和重载的区别","slug":"重写和重载的区别","link":"#重写和重载的区别","children":[]},{"level":3,"title":"可变长参数","slug":"可变长参数","link":"#可变长参数","children":[]}]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"String、StringBuilder、StringBuffer","slug":"string、stringbuilder、stringbuffer","link":"#string、stringbuilder、stringbuffer","children":[]},{"level":3,"title":"String为什么是不可变的","slug":"string为什么是不可变的","link":"#string为什么是不可变的","children":[]},{"level":3,"title":"字符串拼接","slug":"字符串拼接","link":"#字符串拼接","children":[]},{"level":3,"title":"字符串常量池的作用","slug":"字符串常量池的作用","link":"#字符串常量池的作用","children":[]},{"level":3,"title":"String s1 = new String(\\"abc\\");会创建几个对象","slug":"string-s1-new-string-abc-会创建几个对象","link":"#string-s1-new-string-abc-会创建几个对象","children":[]},{"level":3,"title":"String.intern()方法的作用","slug":"string-intern-方法的作用","link":"#string-intern-方法的作用","children":[]},{"level":3,"title":"常量折叠是什么","slug":"常量折叠是什么","link":"#常量折叠是什么","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"SPI是什么？优缺点？","slug":"spi是什么-优缺点","link":"#spi是什么-优缺点","children":[]},{"level":3,"title":"序列化和反序列化","slug":"序列化和反序列化","link":"#序列化和反序列化","children":[]},{"level":3,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[]}]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":7.23,"words":2168},"filePathRelative":"backend/java/1. Java基础.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{d as comp,h as data};
