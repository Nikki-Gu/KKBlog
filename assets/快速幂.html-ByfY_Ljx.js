import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,d as e}from"./app-4Yi0tegr.js";const t={},o=e(`<h3 id="_1-快速幂" tabindex="-1"><a class="header-anchor" href="#_1-快速幂"><span>1. 快速幂</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>long qpow(int a, int n){
    int ans = 1;
    while(n != 0){
        if(n&amp;1 == 1)        //如果n的当前末位为1
            ans *= a % MOD;  //ans乘上当前的a
        a *= a % MOD;        //a自乘
        n &gt;&gt;= 1;       //n往右移一位
    }
    return ans;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="n可能为负数的情况" tabindex="-1"><a class="header-anchor" href="#n可能为负数的情况"><span>n可能为负数的情况</span></a></h4><ol><li>n可能为负数的情况，先将n变为正数，x变为x的倒数</li><li>使用long来存储n，因为Java 代码中 int32 变量 n∈[−2147483648,2147483647]，因此当 n=−2147483648时执行 n=−n会因越界而赋值出错。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> b <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>
            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">*=</span> x<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            x <span class="token operator">*=</span> x<span class="token punctuation">;</span>
            b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="树状数组" tabindex="-1"><a class="header-anchor" href="#树状数组"><span>树状数组</span></a></h3><p>求逆序对</p>`,7),p=[o];function i(l,c){return s(),a("div",null,p)}const u=n(t,[["render",i],["__file","快速幂.html.vue"]]),m=JSON.parse(`{"path":"/algorithm/coding-test/%E5%BF%AB%E9%80%9F%E5%B9%82.html","title":"快速幂","lang":"zh-CN","frontmatter":{"title":"快速幂","order":3,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"1. 快速幂 n可能为负数的情况 n可能为负数的情况，先将n变为正数，x变为x的倒数 使用long来存储n，因为Java 代码中 int32 变量 n∈[−2147483648,2147483647]，因此当 n=−2147483648时执行 n=−n会因越界而赋值出错。 树状数组 求逆序对","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/algorithm/coding-test/%E5%BF%AB%E9%80%9F%E5%B9%82.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"快速幂"}],["meta",{"property":"og:description","content":"1. 快速幂 n可能为负数的情况 n可能为负数的情况，先将n变为正数，x变为x的倒数 使用long来存储n，因为Java 代码中 int32 变量 n∈[−2147483648,2147483647]，因此当 n=−2147483648时执行 n=−n会因越界而赋值出错。 树状数组 求逆序对"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速幂\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":3,"title":"1. 快速幂","slug":"_1-快速幂","link":"#_1-快速幂","children":[]},{"level":3,"title":"树状数组","slug":"树状数组","link":"#树状数组","children":[]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":0.65,"words":196},"filePathRelative":"algorithm/coding-test/快速幂.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{u as comp,m as data};
