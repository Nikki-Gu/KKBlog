import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as i}from"./app-VBsZQ2Bz.js";const n={},s=i(`<h3 id="常用包" tabindex="-1"><a class="header-anchor" href="#常用包"><span>常用包</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list和array的转换" tabindex="-1"><a class="header-anchor" href="#list和array的转换"><span>List和Array的转换</span></a></h3><ol><li><p><code>List.toArray(new int[0][0]);</code></p><p>将List转换为数组，<code>int[0][0]</code>表示动态创建数组，不指定大小</p><p>List需要声明为<code>List&lt;int[]&gt;</code></p></li><li><p><code>Arrays.asList() </code>是一个Java 的静态方法，它可以把一个数组或者多个参数转换成一个List 集合</p><p>三数之和里面用到了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h2><p><a href="https://itmyhome.com/java-api/java/util/List.html" target="_blank" rel="noopener noreferrer">官方API文档</a></p><ol><li><code>List&lt;int[]&gt; res = new ArrayList&lt;&gt;();</code></li><li><code>new List(track) </code>返回track的复制得到的新List</li><li><code>add()</code></li><li><code>get(int Index)</code></li><li><code>remove(int Index)</code><ul><li><code>remove(list.size() - 1)</code></li></ul></li><li><code>size()</code></li><li>排序：<code>Collections.sort</code></li></ol><h3 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h3><ol><li><code>addLast</code></li><li><code>getLast</code></li><li><code>getFirst</code></li><li><code>removeFirst</code></li><li><code>removeLast</code></li></ol><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays"><span>Arrays</span></a></h2><ol><li><p><code>nums.length</code></p></li><li><p><code>System.arraycopy(numsrc, 0, numdst, 0, numsrc.length)</code></p><p>复制数组</p></li><li><p><code>Arrays.sort(numsrc)</code></p><p><code>Arrays.sort(int[] a, int fromIndex, int toIndex)</code> toIndex不参与排序</p><p>排序数组</p><p>比较器规则：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int compare(T o1, T o2);
返回的整数值有以下规则：
o1, o2 返回负数。
o2, o1 返回正数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只用记住：按照参数顺序(o1, o2)排列，需要返回负数</p></li><li><p><code>Arrays.toString()</code></p><p>将int[] 转换为String</p><p>速度很慢</p></li><li><p>比较两个数组内容是否相同：<code>Arrays.equals(tmp_s, tmp_t)</code></p><p>不能用<code>tmp_s.equals(tmp_t)</code>，因为在Java中，数组对象（包括<code>char[]</code>数组）没有自己的<code>equals</code>方法实现。数组类型继承自<code>Object</code>类，但没有重写<code>Object</code>的<code>equals</code>方法，因此数组的<code>equals</code>方法仍然是<code>Object</code>类中的默认实现，也就是比较对象的引用（内存地址）。</p></li></ol><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><ol><li><p>定义：<code>String s = new String(&#39;&#39;)</code></p></li><li><p><code>length()</code></p></li><li><p><code>charAt(index)</code></p></li><li><p><code>substring(left, right)</code> 返回的区间左闭右开[left, right)</p></li><li><p><code>String</code>是不可迭代的，需要<code>toCharArray()</code>变为Char数组（可迭代对象）</p><p><code>for (char c : t.toCharArray()) </code></p></li></ol><h3 id="sting和char数组的转换" tabindex="-1"><a class="header-anchor" href="#sting和char数组的转换"><span>Sting和Char数组的转换</span></a></h3><p>char[] 到String 可以直接<code>new String(char[] str)</code></p><p>String到char[] 是 <code>s.toCharArray()</code></p><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder"><span>StringBuilder</span></a></h3><ol><li>定义<code>StringBuilder sb = new StringBuilder(&quot;&quot;)</code></li><li>添加：<code>append(&#39;x&#39;)</code></li><li>删除：<code>deleteCharAt(index);</code></li><li><code>setCharAt(index, &#39;x&#39;)</code></li><li><code>reverse()</code></li><li><code>toString()</code></li></ol><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h2><ol><li><p>队列<code>Queue</code>实现了一个先进先出（FIFO）的数据结构：</p><ul><li>通过<code>add()</code>/<code>offer()</code>方法将元素添加到队尾；</li><li>通过<code>remove()</code>/<code>poll()</code>从队首获取元素并删除；</li><li>通过<code>element()</code>/<code>peek()</code>从队首获取元素但不删除。</li></ul></li><li><p><code>LinkedList</code>即实现了<code>List</code>接口，又实现了<code>Queue</code>接口，但是，在使用的时候，如果我们把它当作List，就获取List的引用，如果我们把它当作Queue，就获取Queue的引用：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 这是一个List:
List&lt;String&gt; list = new LinkedList&lt;&gt;();
// 这是一个Queue:
Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PriorityQueue 优先级队列，基于优先级堆（最小堆）实现，基础操作如下：</p><p><code>Queue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;();</code></p><p>API和Queue的相同</p><p><code>isEmpty()</code></p><p><code>size()</code></p><p>在插入和删除操作后，<code>PriorityQueue</code> 会自动进行堆化操作，以保持堆的性质。</p></li></ol>`,20),o=[s];function l(c,r){return a(),t("div",null,o)}const u=e(n,[["render",l],["__file","JavaAPI整理.html.vue"]]),h=JSON.parse(`{"path":"/algorithm/coding-test/JavaAPI%E6%95%B4%E7%90%86.html","title":"Java API整理","lang":"zh-CN","frontmatter":{"title":"Java API整理","order":2,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"常用包 List和Array的转换 List.toArray(new int[0][0]); 将List转换为数组，int[0][0]表示动态创建数组，不指定大小 List需要声明为List<int[]> Arrays.asList() 是一个Java 的静态方法，它可以把一个数组或者多个参数转换成一个List 集合 三数之和里面用到了： List 官...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/algorithm/coding-test/JavaAPI%E6%95%B4%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"Java API整理"}],["meta",{"property":"og:description","content":"常用包 List和Array的转换 List.toArray(new int[0][0]); 将List转换为数组，int[0][0]表示动态创建数组，不指定大小 List需要声明为List<int[]> Arrays.asList() 是一个Java 的静态方法，它可以把一个数组或者多个参数转换成一个List 集合 三数之和里面用到了： List 官..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T03:20:07.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-07-10T03:20:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java API整理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-10T03:20:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":3,"title":"常用包","slug":"常用包","link":"#常用包","children":[]},{"level":3,"title":"List和Array的转换","slug":"list和array的转换","link":"#list和array的转换","children":[]},{"level":2,"title":"List","slug":"list","link":"#list","children":[{"level":3,"title":"LinkedList","slug":"linkedlist","link":"#linkedlist","children":[]}]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"Sting和Char数组的转换","slug":"sting和char数组的转换","link":"#sting和char数组的转换","children":[]},{"level":3,"title":"StringBuilder","slug":"stringbuilder","link":"#stringbuilder","children":[]}]},{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[]}],"git":{"createdTime":1715670016000,"updatedTime":1720581607000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":2},{"name":"guzhuoyao","email":"guzhuoyao@bytedance.com","commits":1}]},"readingTime":{"minutes":2.3,"words":691},"filePathRelative":"algorithm/coding-test/JavaAPI整理.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{u as comp,h as data};
