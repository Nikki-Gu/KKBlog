import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as t,d as a}from"./app-BI7tQj8r.js";const i={},n=a(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型"><span>网络模型</span></a></h3><h4 id="osi七层模型" tabindex="-1"><a class="header-anchor" href="#osi七层模型"><span>OSI七层模型</span></a></h4><ol><li>应用（用户服务）</li><li>表示（数据表示，编解码，压缩）</li><li>会话（会话的建立维护重连）</li><li>传输（进程通信传输服务）</li><li>网络（路由和选址）</li><li>数据链路（帧编码和误差纠正控制）</li><li>物理（比特流）</li></ol><h4 id="tcp-ip四层模型" tabindex="-1"><a class="header-anchor" href="#tcp-ip四层模型"><span>TCP/IP四层模型</span></a></h4><ol><li>应用（对应OSI的应用表示会话）</li><li>传输</li><li>网络</li><li>网络接口（对应OSI的数据链路、物理）</li></ol><h3 id="常见协议" tabindex="-1"><a class="header-anchor" href="#常见协议"><span>常见协议</span></a></h3><h4 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层"><span>应用层</span></a></h4><ul><li><p>基于TCP的：HTTP、SMTP、POP3/IMAP、FTP/SFTP、SSH</p><ul><li>HTTP3.0之前都是基于TCP的</li><li>IMAP同步邮箱内容</li><li>SFTP基于SSH，加密安全</li><li>FTP使用两条TCP链接：控制信息和数据信息分开传输；明文传输</li><li>SSH：加密和认证机制</li></ul></li><li><p>基于UDP的：RTP、DNS（域名转IP地址）</p><ul><li>DNS：域名转IP</li></ul></li></ul><h4 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层"><span>传输层</span></a></h4><p>TCP：连接的、可靠的传输服务</p><p>UDP：无连接的、不可靠的传输服务</p><h4 id="网络层" tabindex="-1"><a class="header-anchor" href="#网络层"><span>网络层</span></a></h4><p>IP：定义数据包格式，对数据包进行路由和寻址</p><p>OSPF：动态路由选择协议</p><p>ARP：IP转MAC</p><h3 id="url和uri的区别" tabindex="-1"><a class="header-anchor" href="#url和uri的区别"><span>URL和URI的区别</span></a></h3><p>URI：标记符</p><p>URL：URI的一种；不仅唯一标识资源，而且还提供了定位该资源的信息</p><p>URL = 协议 + 域名 + 服务器上的资源地址</p><h3 id="路由器和交换机的区别" tabindex="-1"><a class="header-anchor" href="#路由器和交换机的区别"><span>路由器和交换机的区别</span></a></h3><ul><li>路由器在网络层：处理TCP/IP协议</li><li>交换机在数据链路层：根据MAC地址寻址</li></ul><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h2><p>80端口号</p><p>无状态，使用Session机制保存用户状态（Session保存在内存数据库redis中），使用Cookie来跟踪Session ID</p><p><strong>Cookie 被禁用怎么办?</strong> URL 重写把 Session ID 直接附加在 URL 路径的后面</p><h3 id="输入url到界面展示的过程发生了什么-用到了什么协议" tabindex="-1"><a class="header-anchor" href="#输入url到界面展示的过程发生了什么-用到了什么协议"><span>输入URL到界面展示的过程发生了什么，用到了什么协议</span></a></h3><ul><li>HTTP、DNS</li><li>TCP</li><li>IP、ARP</li><li>OSPF</li></ul><p>DNS、ARP分别是域名转IP，IP转MAC的协议</p><h3 id="http状态码" tabindex="-1"><a class="header-anchor" href="#http状态码"><span>HTTP状态码</span></a></h3><ul><li>1xx：信息</li><li>2xx：成功 <ul><li>200 OK</li><li>201 Created （POST创建用户）</li><li>202 Accepted（接受但还未处理）</li><li>204 No Content（成功处理无返回值）</li></ul></li><li>3xx：重定向 <ul><li>301 Moved Permanently （永久重定向）</li><li>302 Found （临时重定向）</li></ul></li><li>4xx：客户端错误 <ul><li>400 bad Request （请求问题，比如参数不合法）</li><li>401 Unanthorized</li><li>403 Forbidden （非法请求）</li><li>404 Not Found</li><li>409 Conflict （存在冲突无法处理）</li></ul></li><li>5xx：服务端错误 <ul><li>500 Internal Server Error</li><li>502 Bad Gateway</li></ul></li></ul><h3 id="http和https的区别" tabindex="-1"><a class="header-anchor" href="#http和https的区别"><span>HTTP和HTTPS的区别</span></a></h3><table><thead><tr><th></th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>端口号</td><td>80</td><td>443</td></tr><tr><td>URL前缀</td><td>http</td><td>https</td></tr><tr><td>安全性</td><td>无</td><td>内容加密</td></tr><tr><td>连接方式</td><td>TCP三次握手</td><td>TCP三次握手+SSL/TLS四次握手</td></tr></tbody></table><h3 id="https是如何加密的" tabindex="-1"><a class="header-anchor" href="#https是如何加密的"><span>HTTPS是如何加密的</span></a></h3><p>采用对称加密，但对称加密的密钥用服务器方的公钥进行了非对称加密；</p><p>服务器公钥从数字证书中获取</p><h4 id="连接过程" tabindex="-1"><a class="header-anchor" href="#连接过程"><span>连接过程</span></a></h4><p>四次握手发送的信息：</p><ol><li>ClientHello：TLS协议版本、支持的加密套件、<code>Client Random</code></li><li>ServerHello：支持的加密套件、<code>Server Random</code>、数字证书</li><li>Client加密算法改变/握手结束通知：用服务器公钥加密的<code>pre-master key</code>（也是一个随机数）、之前发送内容的加密摘要</li><li>Server加密算法改变/握手结束通知：摘要</li></ol><p>密钥计算：使用加密算法对三个随机数一起加密得到</p><h4 id="加密实现" tabindex="-1"><a class="header-anchor" href="#加密实现"><span>加密实现</span></a></h4><ol><li><p>混合加密：机密性；</p><ul><li>在通信建立前采用<strong>非对称加密</strong>的方式交换「会话秘钥」，后续就不再使用非对称加密</li><li>在通信过程中全部使用<strong>对称加密</strong>的「会话秘钥」的方式加密明文数据</li></ul><p>采用「混合加密」的方式的原因：</p><ul><li><strong>对称加密</strong>只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换</li><li><strong>非对称加密</strong>使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢，因为密钥长度更长</li></ul></li><li><p>数字证书：身份验证防篡改</p><ul><li>数字证书 <ul><li>服务器公钥：服务器提前注册到CA（数字证书认证机构）</li><li>数字签名：<code>CA私钥</code>对<code>服务器公钥</code>加密生成</li></ul></li><li>服务器注册后CA给服务器发送证书，证书存储在服务器</li><li>客户端请求连接，服务器发送证书给客户端，客户端使用<code>CA的公钥</code>（提前存储在客户端浏览器/操作系统中）对收到证书中的数字签名解密得到<code>服务器公钥</code>，验证这个是否和数字证书中公钥相同</li></ul></li></ol><h3 id="http1-0和http1-1的区别" tabindex="-1"><a class="header-anchor" href="#http1-0和http1-1的区别"><span>HTTP1.0和HTTP1.1的区别</span></a></h3><p>短链接：网页中含有其他资源需要重新建立TCP连接，浪费资源（大量的“握手报文”和“挥手报文”）</p><ul><li>本质上是 TCP 协议的长连接和短连接；实现长连接需要客户端和服务端都支持长连接</li></ul><table><thead><tr><th></th><th>HTTP1.0</th><th>HTTPS1.1</th></tr></thead><tbody><tr><td>连接方式</td><td>默认短连接</td><td>默认长连接</td></tr><tr><td>范围请求</td><td>不支持</td><td>支持范围请求和断点续传</td></tr><tr><td>Host字段</td><td>无</td><td>有，支持虚拟主机</td></tr><tr><td>缓存</td><td>If-Modified-Since,Expires</td><td>if-None-Match, Etag头部（资源内容摘要）</td></tr></tbody></table><h3 id="http1-1和http2-0的区别" tabindex="-1"><a class="header-anchor" href="#http1-1和http2-0的区别"><span>HTTP1.1和HTTP2.0的区别</span></a></h3><table><thead><tr><th></th><th>HTTP1.1</th><th>HTTPS2.0</th></tr></thead><tbody><tr><td>多路复用</td><td>不支持，每个请求/响应需要独立的连接</td><td>同一连接上可以同时传输多个请求和响应</td></tr><tr><td>数据格式</td><td>文本格式</td><td>二进制帧</td></tr><tr><td>数据压缩</td><td>Body压缩</td><td>Body压缩+Header压缩</td></tr><tr><td>推送</td><td>无</td><td>一次请求，多次推送</td></tr></tbody></table><h3 id="http如何保存用户状态-ref-认证授权" tabindex="-1"><a class="header-anchor" href="#http如何保存用户状态-ref-认证授权"><span>HTTP如何保存用户状态 ref 认证授权</span></a></h3><p>Session-Cookie单服务器环境</p><ol><li>用户发送登录请求</li><li>服务器创建Session，存储，返回写入了SessionID的Cookie</li><li>用户在登录状态下，写入了SessionID的Cookie会和后序每个请求一起发送</li><li>服务器比较请求中的SessionID和存储在数据库中的Session信息以验证身份，附带用户状态</li></ol><p>Session有过期时间</p><p>一般需要客户端开启Cookie；禁用Cookie后将sessionID放在请求的url里面，优化：加密</p><p>多服务器节点下的Session-Cookie方案？</p><ol><li>哈希策略</li><li>全局同步信息</li><li>数据节点</li><li>Spring Session；集成后端存储（Redis）实现分布式会话管理</li></ol><h3 id="get和post的区别" tabindex="-1"><a class="header-anchor" href="#get和post的区别"><span>GET和POST的区别</span></a></h3><p>幂等的：多次重复执行不会改变资源的状态</p><p>GET和PUT是幂等的，POST不是。</p><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h2><p>HTTP/1.1是半双工协议，同一时间内只能有一方主动发送数据</p><p>WebSocket实现全双工协议，同一时间双方都可以主动发送数据</p><p>应用层协议</p><p>通过心跳机制来保持 WebSocket 连接的稳定性和活跃性</p><h3 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接"><span>建立连接</span></a></h3><ol><li><p>TCP三次握手</p></li><li><p>HTTP一次通信</p><ol><li><p>请求，请求头添加：</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Upgrade</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">WebSocket</span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Key</span><span class="token punctuation">:</span> <span class="token header-value">T2a6wZlAwhgQNqruZ2YUyg==\\r\\n</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>响应：101协议切换</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">101</span> <span class="token reason-phrase string">Switching Protocols\\r\\n</span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> <span class="token header-value">iBJKv/ALIW2DobfoA4dmr3JHBCY=\\r\\n</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">WebSocket\\r\\n</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Upgrade\\r\\n</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p>服务器和客户端频繁交互</p><ul><li>游戏</li><li>聊天室</li><li>协同办公软件</li></ul><h2 id="ping" tabindex="-1"><a class="header-anchor" href="#ping"><span>PING</span></a></h2><h3 id="基础-1" tabindex="-1"><a class="header-anchor" href="#基础-1"><span>基础</span></a></h3><p>作用：测试网络中主机之间的连通性和延迟</p><p>返回结果：</p><ul><li>目标主机的域名/IP</li><li>RTT往返时间</li><li>统计结果</li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>基于ICMP协议（<strong>Internet Control Message Protocol，互联网控制报文协议</strong>）</p><p>ICMP报文类型：</p><ul><li>查询报文类型 <ul><li>PING中用到的是ICMP Echo Request 和 ICMP Echo Reply</li></ul></li><li>差错报文类型</li></ul><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h2><h3 id="基础-2" tabindex="-1"><a class="header-anchor" href="#基础-2"><span>基础</span></a></h3><p>作用：域名和IP的映射</p><p>端口号：53</p><p>层次：应用层协议，可以运行在TCP和UDP上</p><h3 id="缓存查询过程" tabindex="-1"><a class="header-anchor" href="#缓存查询过程"><span>缓存查询过程</span></a></h3><ol><li><p>浏览器缓存</p></li><li><p>操作系统缓存</p></li><li><p>hosts文件</p></li><li><p>本地DNS服务器</p></li><li><p>递归查询+迭代查询（一般的实现）</p><p>路由器到本地DNS服务器是递归查询</p><p>本地DNS服务器迭代查询（先问根DNS服务器，再去访问TLD服务器、再去访问权威DNS服务器）</p></li></ol><h3 id="dns劫持todo" tabindex="-1"><a class="header-anchor" href="#dns劫持todo"><span>DNS劫持TODO</span></a></h3><p>修改 DNS 服务器的解析结果，使用户访问的域名指向错误的 IP 地址</p><h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP</span></a></h2><h3 id="tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#tcp和udp的区别"><span>TCP和UDP的区别</span></a></h3><ol><li>是否面向连接</li><li>是否可靠（差错、丢失、重复、顺序）</li><li>传输效率，首部开销</li><li>传输形式：TCP面向字节流 vs UDP面向报文</li><li>广播or多播服务：TCP只支持点对点通信</li></ol><h3 id="tcp头部字段" tabindex="-1"><a class="header-anchor" href="#tcp头部字段"><span>TCP头部字段</span></a></h3><p>TCP头部字段20-60字节，包括SEQ number、ACK number，标记位（SYN、 ACK）</p><p>TODO图片插入：&quot;/Users/nikki/Library/Application Support/typora-user-images/image-20240328133238081.png&quot;</p><p>SYN报文：指TCP头部字段中SYN标记位为1的报文；用于建立连接</p><p>ACK报文：指TCP头部字段中ACK标记位为1的报文</p><p>SEQ number：SEQ，TCP头部字段，标识TCP数据的字节顺序；</p><ul><li>SYN = 1时，SEQ number是自己的随机初始序列号（数据字节第一位）；</li><li>SYN != 1时，SEQ number是自己上一次的seq number + 当前发送的字节数</li><li>三次握手的报文字节数目不计入数据字节数中，也就是不影响seq number，这三次中seq number的变化是约定好的，每次+1；建立好连接后的第一次数据传输的seq number和最后一次握手相同</li><li>作用： <ul><li>TCP连接的每个端点都会维护一个变量来跟踪接收到的最后一个序列号;这个变量通常称为接收窗口（Receive Window）</li><li>通过比较序列号可以检测是否丢失、重复数据。通过序列号，TCP可以实现可靠的数据传输。</li></ul></li></ul><p>ACK number：希望收到对方下一次发送报文的seq number，通常是对方的seq number + 1，用来表示接受到了对方的seq number</p><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h3><p>目的：建立可靠信道，确认接受和发送的正常进行（自己接收、自己发送、对方接收、对方发送）</p><ol><li><p>S知道C的发送正常，S接收正常</p></li><li><p>C知道C的发送、接收正常，S的发送、接收正常</p></li><li><p>S知道S发送正常，C接收正常</p></li><li><p>（SYN = 1）SEQ = x</p></li><li><p>（SYN = 1，ACK = 1） SEQ = y；ACK number = x + 1；</p></li><li><p>（ACK = 1）SEQ = x + 1；ACK number = y + 1；</p></li></ol><p>开始通信：客户端请求SEQ = x + 1；ACK number = y + 1；</p><h4 id="为什么是三次" tabindex="-1"><a class="header-anchor" href="#为什么是三次"><span>为什么是三次</span></a></h4><ol><li><p>四次：指两端分别发送SYN和ACK建立通信</p><p>四次握手冗余了，S对C的确认和自己序列号的发送可以合并</p></li><li><p>两次：前两次握手</p><p>无法建立可靠连接，前两次握手只是建立了客户端到服务端的连接，但是不确定C是否接收到了S的序列号，没有建立服务端到客户端的连接</p></li></ol><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h3><p>客户端和服务端分别关闭连接：FIN和ACK</p><p>为什么不能和三次握手一样合并？因为服务端可能还有数据没有发送完</p><p>客户端发送ACK后需要等待2*MSL（报文段发送和回复的最长时间），如果服务端没有收到ACK会重发FIN，客户端需要再回复ACK，重复上述过程。这样做是为了防止ACK丢失服务端不断重发FIN。</p><h3 id="tcp如何保证传输可靠性" tabindex="-1"><a class="header-anchor" href="#tcp如何保证传输可靠性"><span>TCP如何保证传输可靠性</span></a></h3><ol><li>基于数据块</li><li>基于序列号的去重和排序</li><li>基于校验和的差错控制</li><li>重传机制（超时重传、快速重传）</li><li>流量控制（接收方）：取决于接收方接收能力。固定大小的缓冲区，利用滑动窗口实现</li><li>拥塞控制（发送方）：拥塞窗口（发送方根据网络状况自己维护的一个值，表示发送方认为可以在网络中传输的数据量）。发送方发送数据的大小是滑动窗口和拥塞窗口的最小值，这样可以保证发送方既不会超过接收方的接收能力，也不会造成网络的过度拥塞。</li></ol><h3 id="tcp如何实现拥塞控制" tabindex="-1"><a class="header-anchor" href="#tcp如何实现拥塞控制"><span>TCP如何实现拥塞控制</span></a></h3><p>用塞控制是全局性的，和网络有关</p><p>TCP 发送方维持</p><ul><li><strong>拥塞窗口(cwnd)</strong> 变量：congestion window</li><li>ssthresh（slow start threshold）变量：cwnd达到这个值就转换为拥塞避免算法</li></ul><p>四种算法：</p><ul><li><p>慢启动：cwnd 初始值为 1，每经过一个RTT，cwnd 加倍</p></li><li><p>拥塞避免：每经过一个 RTT，cwnd 加 1</p></li><li><p>快速重传：cwnd设置为原来的一半，ssthresh为cwnd</p><ul><li>当接收方发现丢了一个中间包的时候，发送三次前一个包的 ACK，于是发送端就会快速地重传，不必等待超时再重传。</li></ul></li><li><p>快速恢复：如果接收到一个不按顺序的数据段，它会立即给发送一个重复确认。如果发送机接收到三个重复确认就立刻重传丢失的数据段</p><ul><li><code>cwnd = ssthresh + 3</code></li></ul></li></ul><h3 id="超时重传如何实现" tabindex="-1"><a class="header-anchor" href="#超时重传如何实现"><span>超时重传如何实现</span></a></h3><p>每个发送数据接收到之后都要回应ACK确认，超时没有收到ACK就要重新发送数据</p><ul><li>RTT（Round Trip Time）：往返时间，也就是数据包从发出去到收到对应 ACK 的时间</li><li>RTO（Retransmission Time Out）：重传超时时间，即从数据发送时刻算起，超过这个时间便执行重传</li><li>RTT 的值会随着网络的波动而变化，所以 TCP 不能直接使用 RTT 作为 RTO <ul><li>加权移动平均（EWMA）算法</li></ul></li></ul><h2 id="ip" tabindex="-1"><a class="header-anchor" href="#ip"><span>IP</span></a></h2><p>作用：定义了IP地址格式、对数据包进行路由和寻址，实现跨网络传播</p><p>IP 数据包含了 <strong>源 IP 地址</strong> 和 <strong>目的 IP 地址</strong></p><p>两种IP协议：</p><ul><li>IPv4：32位，分为4组，每组8bit，用十进制可以表示0-255的范围，所以是0.0.0.0 - 255.255.255.255</li><li>IPv6：128位，分为8组，每组16bit（对应4位16进制数），用16进制可以表示0000-FFFF的范围</li></ul><h2 id="nat" tabindex="-1"><a class="header-anchor" href="#nat"><span>NAT</span></a></h2><p>NAT是网络地址转换协议，实现私有IP和公有IP的地址映射（IP转IP）</p><p>作用：</p><ul><li>缓解 IPv4 地址资源短缺的问题（对 WAN 屏蔽 LAN）</li><li>变更地址无需通知</li><li>隐藏内部网络拓扑结构</li></ul><p>缺点：WAN端标识一个内部主机时，使用的是端口号，因为 IP 地址都是相同的，所以端口号可能重复，导致安全问题</p><h2 id="arp协议" tabindex="-1"><a class="header-anchor" href="#arp协议"><span>ARP协议</span></a></h2><h3 id="mac地址" tabindex="-1"><a class="header-anchor" href="#mac地址"><span>MAC地址</span></a></h3><p>48位（6个字节）</p><p><strong>媒体访问控制地址（Media Access Control Address）</strong></p><p>网络设备的身份证号</p><p>MAC 地址 = LAN 地址、物理地址、以太网地址</p><p>FF-FF-FF-FF-FF-FF（全 1 地址），该地址表示广播地址</p><h3 id="ip转mac" tabindex="-1"><a class="header-anchor" href="#ip转mac"><span>IP转MAC</span></a></h3><p>在一个局域网内，每个网络设备都自己维护了一个 <strong>ARP 表</strong>： <code>&lt;IP, MAC, TTL&gt;</code></p><p>TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。</p><p><strong>ARP 响应分组</strong>具有和<strong>ARP 查询分组</strong>相同的构造</p><ul><li>均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址</li><li>未知的MAC地址使用特殊值：<code>FF-FF-FF-FF-FF-FF</code>，表示广播地址</li></ul><h4 id="同一局域网内的-mac-寻址" tabindex="-1"><a class="header-anchor" href="#同一局域网内的-mac-寻址"><span><strong>同一局域网内的 MAC 寻址</strong></span></a></h4><p><strong>广播问询，单播响应</strong>的协议</p><p>主机A查找主机B</p><ol><li>A检索本机ARP表</li><li>构造ARP查询分组，在局域网广播</li><li>目的主机B在本地的ARP表中添加A的信息；构造ARP响应分组，发送给A；</li><li>A收到响应分组，提取信息加入A的ARP表</li></ol><h4 id="不同局域网内的-mac-寻址" tabindex="-1"><a class="header-anchor" href="#不同局域网内的-mac-寻址"><span>不同局域网内的 MAC 寻址</span></a></h4><p>通过同一局域网内的 MAC 寻址找到目标路由器的本子网接口，发送IP数据报</p><p>目标路由器解析IP数据包，通过同一局域网内的 MAC 寻址找到目标主机，发送IP数据报</p><p>目标路由器：能够把报文转发到 B 所在子网的路由器（根据目的主机 B 的 IP 地址，分析出 B 所在的子网，可以找到目标路由器）</p>`,148),s=[n];function p(r,d){return t(),l("div",null,s)}const c=e(i,[["render",p],["__file","计算机网络.html.vue"]]),u=JSON.parse(`{"path":"/backend/cs-base/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html","title":"计算机网络","lang":"zh-CN","frontmatter":{"title":"计算机网络","order":1,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"基础 网络模型 OSI七层模型 应用（用户服务） 表示（数据表示，编解码，压缩） 会话（会话的建立维护重连） 传输（进程通信传输服务） 网络（路由和选址） 数据链路（帧编码和误差纠正控制） 物理（比特流） TCP/IP四层模型 应用（对应OSI的应用表示会话） 传输 网络 网络接口（对应OSI的数据链路、物理） 常见协议 应用层 基于TCP的：HTTP...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/cs-base/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"计算机网络"}],["meta",{"property":"og:description","content":"基础 网络模型 OSI七层模型 应用（用户服务） 表示（数据表示，编解码，压缩） 会话（会话的建立维护重连） 传输（进程通信传输服务） 网络（路由和选址） 数据链路（帧编码和误差纠正控制） 物理（比特流） TCP/IP四层模型 应用（对应OSI的应用表示会话） 传输 网络 网络接口（对应OSI的数据链路、物理） 常见协议 应用层 基于TCP的：HTTP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:42:57.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:42:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:42:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"网络模型","slug":"网络模型","link":"#网络模型","children":[]},{"level":3,"title":"常见协议","slug":"常见协议","link":"#常见协议","children":[]},{"level":3,"title":"URL和URI的区别","slug":"url和uri的区别","link":"#url和uri的区别","children":[]},{"level":3,"title":"路由器和交换机的区别","slug":"路由器和交换机的区别","link":"#路由器和交换机的区别","children":[]}]},{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[{"level":3,"title":"输入URL到界面展示的过程发生了什么，用到了什么协议","slug":"输入url到界面展示的过程发生了什么-用到了什么协议","link":"#输入url到界面展示的过程发生了什么-用到了什么协议","children":[]},{"level":3,"title":"HTTP状态码","slug":"http状态码","link":"#http状态码","children":[]},{"level":3,"title":"HTTP和HTTPS的区别","slug":"http和https的区别","link":"#http和https的区别","children":[]},{"level":3,"title":"HTTPS是如何加密的","slug":"https是如何加密的","link":"#https是如何加密的","children":[]},{"level":3,"title":"HTTP1.0和HTTP1.1的区别","slug":"http1-0和http1-1的区别","link":"#http1-0和http1-1的区别","children":[]},{"level":3,"title":"HTTP1.1和HTTP2.0的区别","slug":"http1-1和http2-0的区别","link":"#http1-1和http2-0的区别","children":[]},{"level":3,"title":"HTTP如何保存用户状态 ref 认证授权","slug":"http如何保存用户状态-ref-认证授权","link":"#http如何保存用户状态-ref-认证授权","children":[]},{"level":3,"title":"GET和POST的区别","slug":"get和post的区别","link":"#get和post的区别","children":[]}]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[{"level":3,"title":"建立连接","slug":"建立连接","link":"#建立连接","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"PING","slug":"ping","link":"#ping","children":[{"level":3,"title":"基础","slug":"基础-1","link":"#基础-1","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"DNS","slug":"dns","link":"#dns","children":[{"level":3,"title":"基础","slug":"基础-2","link":"#基础-2","children":[]},{"level":3,"title":"缓存查询过程","slug":"缓存查询过程","link":"#缓存查询过程","children":[]},{"level":3,"title":"DNS劫持TODO","slug":"dns劫持todo","link":"#dns劫持todo","children":[]}]},{"level":2,"title":"TCP","slug":"tcp","link":"#tcp","children":[{"level":3,"title":"TCP和UDP的区别","slug":"tcp和udp的区别","link":"#tcp和udp的区别","children":[]},{"level":3,"title":"TCP头部字段","slug":"tcp头部字段","link":"#tcp头部字段","children":[]},{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":3,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]},{"level":3,"title":"TCP如何保证传输可靠性","slug":"tcp如何保证传输可靠性","link":"#tcp如何保证传输可靠性","children":[]},{"level":3,"title":"TCP如何实现拥塞控制","slug":"tcp如何实现拥塞控制","link":"#tcp如何实现拥塞控制","children":[]},{"level":3,"title":"超时重传如何实现","slug":"超时重传如何实现","link":"#超时重传如何实现","children":[]}]},{"level":2,"title":"IP","slug":"ip","link":"#ip","children":[]},{"level":2,"title":"NAT","slug":"nat","link":"#nat","children":[]},{"level":2,"title":"ARP协议","slug":"arp协议","link":"#arp协议","children":[{"level":3,"title":"MAC地址","slug":"mac地址","link":"#mac地址","children":[]},{"level":3,"title":"IP转MAC","slug":"ip转mac","link":"#ip转mac","children":[]}]}],"git":{"createdTime":1715670016000,"updatedTime":1715672577000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":2}]},"readingTime":{"minutes":13.22,"words":3967},"filePathRelative":"backend/cs-base/计算机网络/计算机网络.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{c as comp,u as data};
