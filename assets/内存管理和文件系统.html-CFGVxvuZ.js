import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,d as a}from"./app-DtLkQmRI.js";const t={},n=a('<h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>一般内存管理就是指操作系统的内存分配策略</p><ul><li>内存分配和回收：给进程分配需要的内存，进程结束后回收内存资源 <ul><li>内存分配策略</li><li>内存回收算法</li></ul></li><li>地址转换：虚拟内存地址转为物理内存地址 <ul><li>映射</li><li>保证进程之间内存使用互不干扰</li></ul></li></ul><h3 id="内存分配策略" tabindex="-1"><a class="header-anchor" href="#内存分配策略"><span>内存分配策略</span></a></h3><ul><li>连续内存管理：进程使用的内存空间连续 <ul><li>块式管理</li><li>伙伴系统算法：按照2的幂划分块，每次找能满足需求的最小块；连续的是伙伴，可以再分，解决外部内存碎片</li></ul></li><li>非连续内存管理：进程使用的内存空间可以不连续 <ul><li>段式</li><li>页式</li><li>段页式</li></ul></li></ul><h3 id="使用虚拟内存的优点" tabindex="-1"><a class="header-anchor" href="#使用虚拟内存的优点"><span>使用虚拟内存的优点</span></a></h3><p>作用：作为进程访问物理内存的一个桥梁，简化内存管理</p><p>优点：</p><ul><li>隔离进程，安全：每个进程对应一个虚拟地址空间，通过虚拟地址空间映射到物理内存，无法直接操作别的进程的物理内存，彼此隔离</li><li>简化内存管理：开发时统一访问虚拟地址空间，操作统一</li><li>提高物理内存利用率 <ul><li>共享物理内存：物理内存中只用存一份操作系统的动态库，每个进程共享</li><li>选择加载：正在使用的部分加载到物理内存，不用的可以放到磁盘</li></ul></li><li>更大内存空间：物理内存不够时，可以用磁盘充当</li></ul><h3 id="虚拟地址和物理地址的映射" tabindex="-1"><a class="header-anchor" href="#虚拟地址和物理地址的映射"><span>虚拟地址和物理地址的映射</span></a></h3><p>使用CPU里的MMU（Memory Management Unit）进行地址转换</p><p>物理内存的分配机制不同，映射方式也不同：</p><ul><li>分段：段的大小不相等，段是逻辑单位；存在外部内存碎片</li><li>分页：页的大小相等 <ul><li>页表 <ul><li>页缺失： <ul><li>硬性页缺失：物理内存中没有对应物理页（换出去了）</li><li>软性页缺失：物理内存中有对应物理页，但还没和虚拟页建立映射（页表项还不存在）</li></ul></li><li>多级页表：时间换空间，利用增加页表查询的次数减少页表占用的空间</li><li>TLB（<strong>Translation Lookaside Buffer</strong>）：快表，页表的缓存，提高转换速度；高速缓存</li></ul></li></ul></li><li>段页</li></ul><h3 id="页面置换算法" tabindex="-1"><a class="header-anchor" href="#页面置换算法"><span>页面置换算法</span></a></h3><p>页面置换=换页机制：物理内存不够时，操作系统将一些物理页的内容放到磁盘上去；淘汰物理内存页的规则</p><p>常见的页面置换算法</p><ul><li>OPT：理想算法，不可实现</li><li>FIFO：先进先出</li><li>LRU：最近最久未使用；最接近OPT的</li><li>LFU：最少使用</li></ul><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统"><span>文件系统</span></a></h2><p>CPU缓存-内存（虚拟内存空间-物理内存）-硬盘</p><h3 id="文件系统-1" tabindex="-1"><a class="header-anchor" href="#文件系统-1"><span>文件系统</span></a></h3><p>每个文件和目录都有一个唯一的索引节点（inode）号，用来标识该文件或目录</p><p>每个文件系统都有自己的独立 inode 表，维护自己文件系统内的inode节点号</p><p>Inode表中存储</p><ul><li>inode号码</li><li>指针：指向文件的数据存储位置</li></ul><h3 id="文件链接" tabindex="-1"><a class="header-anchor" href="#文件链接"><span>文件链接</span></a></h3><p>文件链接（File Link）是一种特殊的文件类型</p><h4 id="硬连接" tabindex="-1"><a class="header-anchor" href="#硬连接"><span>硬连接</span></a></h4><ul><li><code>ln</code> 命令创建</li><li>硬链接和源文件的 inode 节点号相同，两者平等</li><li>不能对目录以及不存在的文件创建硬链接</li><li>不能跨越文件系统</li><li>作用：删除其中任何一个对另外一个没有影响，可以通过给文件设置硬链接文件来防止重要文件被误删；只有两个都删除才是真的删除</li></ul><h4 id="软连接" tabindex="-1"><a class="header-anchor" href="#软连接"><span>软连接</span></a></h4><ul><li><code>ln -s</code> 命令创建</li><li>软链接和源文件的 inode 节点号不同，而是指向一个文件路径</li><li>相当于快捷方式</li><li>可以对目录以及不存在的文件创建硬链接</li><li>可以跨越文件系统</li></ul>',31),r=[n];function o(s,c){return i(),e("div",null,r)}const d=l(t,[["render",o],["__file","内存管理和文件系统.html.vue"]]),u=JSON.parse(`{"path":"/backend/cs-base/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html","title":"内存管理和文件系统","lang":"zh-CN","frontmatter":{"title":"内存管理和文件系统","order":7,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"内存管理 定义 一般内存管理就是指操作系统的内存分配策略 内存分配和回收：给进程分配需要的内存，进程结束后回收内存资源 内存分配策略 内存回收算法 地址转换：虚拟内存地址转为物理内存地址 映射 保证进程之间内存使用互不干扰 内存分配策略 连续内存管理：进程使用的内存空间连续 块式管理 伙伴系统算法：按照2的幂划分块，每次找能满足需求的最小块；连续的是伙...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/cs-base/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"内存管理和文件系统"}],["meta",{"property":"og:description","content":"内存管理 定义 一般内存管理就是指操作系统的内存分配策略 内存分配和回收：给进程分配需要的内存，进程结束后回收内存资源 内存分配策略 内存回收算法 地址转换：虚拟内存地址转为物理内存地址 映射 保证进程之间内存使用互不干扰 内存分配策略 连续内存管理：进程使用的内存空间连续 块式管理 伙伴系统算法：按照2的幂划分块，每次找能满足需求的最小块；连续的是伙..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存管理和文件系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"内存管理","slug":"内存管理","link":"#内存管理","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"内存分配策略","slug":"内存分配策略","link":"#内存分配策略","children":[]},{"level":3,"title":"使用虚拟内存的优点","slug":"使用虚拟内存的优点","link":"#使用虚拟内存的优点","children":[]},{"level":3,"title":"虚拟地址和物理地址的映射","slug":"虚拟地址和物理地址的映射","link":"#虚拟地址和物理地址的映射","children":[]},{"level":3,"title":"页面置换算法","slug":"页面置换算法","link":"#页面置换算法","children":[]}]},{"level":2,"title":"文件系统","slug":"文件系统","link":"#文件系统","children":[{"level":3,"title":"文件系统","slug":"文件系统-1","link":"#文件系统-1","children":[]},{"level":3,"title":"文件链接","slug":"文件链接","link":"#文件链接","children":[]}]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":3.33,"words":999},"filePathRelative":"backend/cs-base/操作系统/内存管理和文件系统.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{d as comp,u as data};
