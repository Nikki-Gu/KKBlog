import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,d as s}from"./app-BvhbkOZi.js";const t={},l=s(`<p><code>cd /usr/local/redis-7.0.15/src</code></p><p>启动服务端：<code>redis-server</code></p><p>启动客户端：<code>redis-cli</code></p><p>测试连接情况：ping，pong</p><p>没有正常关闭的情况删除进程：</p><p><code>ps aux|grep redis</code></p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><p>C语言开发的NoSQL数据库；内存数据库而且支持持久化（读写速度快）</p><p>用于分布式缓存</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><p>key是字符串</p><p>5种value：</p><ul><li>value 字符串</li><li>hash：适合存储对象</li><li>List：队列；插入顺序排序可重复；点赞数据</li><li>set：好友</li><li>zset：排行榜</li></ul><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><p>通用命令：对key进行操作</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">KEYS</span> pattern
<span class="token constant">EXISTS</span> key
<span class="token constant">TYPE</span> key <span class="token comment">// 返回存储的数据类型</span>
<span class="token constant">DEL</span> key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">SET</span> key value
<span class="token constant">GET</span> key
<span class="token constant">SETEX</span> key seconds value <span class="token comment">// 手机号，60s，短信验证码</span>
<span class="token constant">SETNX</span> key value <span class="token comment">// key不存在时设置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哈希表：里面的field和value都是字符串</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">HSET</span> key field value
<span class="token constant">HGET</span> key field
<span class="token constant">HDEL</span> key field
<span class="token constant">HKEYS</span> key
<span class="token constant">HVALS</span> key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表（队列）：里面的values都是字符串；左头右尾</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">LPUSH</span> key value1 <span class="token punctuation">[</span>value2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token constant">LRANGE</span> key start stop
<span class="token constant">RPOP</span> key
<span class="token constant">LLEN</span> key <span class="token comment">// size</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集合：String类型的无序集合</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">SADD</span> key member1 <span class="token punctuation">[</span>member2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token constant">SREM</span> key member1 <span class="token punctuation">[</span>member2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token constant">SMEMBERS</span> key <span class="token comment">// values()</span>
<span class="token constant">SCARD</span> key <span class="token comment">// size</span>
<span class="token constant">SINTER</span> key1 <span class="token punctuation">[</span>key2<span class="token punctuation">]</span> <span class="token comment">// 交集</span>
<span class="token constant">SUNION</span> key1 <span class="token punctuation">[</span>key2<span class="token punctuation">]</span> <span class="token comment">// 并集</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有序集合：String类型的有序集合，每个元素有一个double类型的分数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">ZADD</span> key score1 member1 <span class="token punctuation">[</span>score2<span class="token punctuation">,</span> member2<span class="token punctuation">]</span>
<span class="token constant">ZRANGE</span> key start stop <span class="token punctuation">[</span>withscore展示分数<span class="token punctuation">]</span>
<span class="token constant">ZINCREBY</span> key increment member <span class="token comment">// 对member的分数加上increment</span>
<span class="token constant">ZREM</span> key member1 <span class="token punctuation">[</span>member2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis事务" tabindex="-1"><a class="header-anchor" href="#redis事务"><span>Redis事务</span></a></h3><p>不满足原子性（不支持回滚）</p><p>满足持久性，支持3种持久化方法：</p><ul><li>快照RDB</li><li>只追加文件AOF：比RDB实时性更好，主流方式 <ul><li>将执行的写命令写到AOF文件末尾，记录数据变化（恢复：重启时再次执行AOF文件中的命令来恢复）</li><li>三种策略： <ul><li>always：每次数据修改同步AOF文件；可以满足持久性要求，但是性能太差，一般不用</li><li>everysec：每秒钟同步AOF文件</li><li>no：操作系统决定</li></ul></li></ul></li><li>RDB和AOF的混合持久化</li></ul><p>如何解决Redis事务的缺陷：支持Lua脚本，使用Lua脚本可以批量执行多条Redis命令</p><ul><li>Lua脚本执行过程中不会有其他脚本/Redis命令同时执行，保证不受干扰</li><li>Lua脚本运行出错，后续命令不会执行，前绪执行结果不能回滚（也不满足原子性）</li></ul><h3 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理"><span>权限管理</span></a></h3><p><a href="https://blog.csdn.net/cj_eryue/article/details/131401400" target="_blank" rel="noopener noreferrer">ACL权限管理功能</a></p><p>redis-cli之后需要用auth username 密码 登陆，username默认是default</p><h2 id="生产问题" tabindex="-1"><a class="header-anchor" href="#生产问题"><span>生产问题</span></a></h2><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h3><p>请求的key既不在缓存也不在数据库中，导致请求直接穿过缓存进行数据库查询，对数据库造成压力</p><p>解决方法：</p><ul><li>缓存无效的key</li><li>布隆过滤器</li><li>对异常IP限流</li></ul><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h3><p>请求的key是热点数据，但是不在缓存中（缓存中数据已过期），导致请求直接穿过缓存进行数据库查询，对数据库造成压力</p><p>场景：秒杀</p><p>解决方法：</p><ul><li>设置增加热点数据过期时间</li><li>提前预热（提前放入缓存并设置合理过期时间）</li><li>互斥锁？</li></ul><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h3><p>大量缓存数据同时过期，刚好有大量请求访问过期数据</p><p>导致缓存雪崩的问题和对应解决方法：</p><p><strong>Redis服务不可用：</strong></p><ol><li>采用Redis集群</li><li>限流，避免同时处理大量请求</li><li>多级缓存</li></ol><p><strong>热点缓存失效</strong>：</p><ol><li>设置不同失效时间（比如随机设置）</li><li>缓存预热 <ol><li>定时任务：定时将数据库中热点数据查询出来放入缓存；xxl-job</li><li>消息队列：异步进行缓存预热；Kafka</li></ol></li></ol>`,52),i=[l];function p(c,o){return n(),e("div",null,i)}const u=a(t,[["render",p],["__file","Redis.html.vue"]]),v=JSON.parse(`{"path":"/backend/database/Redis.html","title":"Redis","lang":"zh-CN","frontmatter":{"title":"Redis","order":5,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"cd /usr/local/redis-7.0.15/src 启动服务端：redis-server 启动客户端：redis-cli 测试连接情况：ping，pong 没有正常关闭的情况删除进程： ps aux|grep redis 基础 C语言开发的NoSQL数据库；内存数据库而且支持持久化（读写速度快） 用于分布式缓存 数据类型 key是字符串 5种...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/database/Redis.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"Redis"}],["meta",{"property":"og:description","content":"cd /usr/local/redis-7.0.15/src 启动服务端：redis-server 启动客户端：redis-cli 测试连接情况：ping，pong 没有正常关闭的情况删除进程： ps aux|grep redis 基础 C语言开发的NoSQL数据库；内存数据库而且支持持久化（读写速度快） 用于分布式缓存 数据类型 key是字符串 5种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"Redis事务","slug":"redis事务","link":"#redis事务","children":[]},{"level":3,"title":"权限管理","slug":"权限管理","link":"#权限管理","children":[]}]},{"level":2,"title":"生产问题","slug":"生产问题","link":"#生产问题","children":[{"level":3,"title":"缓存穿透","slug":"缓存穿透","link":"#缓存穿透","children":[]},{"level":3,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[]},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[]}]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":3.14,"words":942},"filePathRelative":"backend/database/Redis.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{u as comp,v as data};
