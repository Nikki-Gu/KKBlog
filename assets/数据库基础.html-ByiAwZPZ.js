import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,d as e}from"./app-C8LDM16F.js";const l={},t=e(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="关系型数据库和非关系型数据库区别" tabindex="-1"><a class="header-anchor" href="#关系型数据库和非关系型数据库区别"><span>关系型数据库和非关系型数据库区别</span></a></h3><p>关系型数据库：</p><ol><li>数据存储结构化，易于维护</li><li>支持ACID事务（原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability）</li><li>支持垂直扩展（使用性能更强大的服务器）、读写分离、分库分表</li><li>使用SQL，语言通用，支持复杂查询</li></ol><p>缺点：</p><ol><li>不灵活：固定的表结构</li><li>扩展性有限：不便于横向扩展（增加服务器、分片机制）</li><li>性能：读写性能比较差，尤其是海量数据的高效率读写；</li></ol><h3 id="非关系型数据库类型" tabindex="-1"><a class="header-anchor" href="#非关系型数据库类型"><span>非关系型数据库类型</span></a></h3><p>key-value：Redis、DynanoDB</p><p>Document：MongoDB（存储结构和代码对象保持一致）</p><p>Graph：Neo4j</p><p>Wide-Column：HBase</p><h3 id="三个范式" tabindex="-1"><a class="header-anchor" href="#三个范式"><span>三个范式</span></a></h3><p>1NF：属性/字段不可再分</p><p>2NF：在 1NF 的基础之上，每个表有主键，而且非主键完全依赖于主键（消除了非主属性对于主键的部分函数依赖）</p><p>3NF：在2NF的基础上，每个属性不依赖于其他非主属性（消除非主属性对于其他非主属性的传递函数依赖）</p><p>BCNF范式：</p><p>1NF是关系型数据库的基本要求；不满足1NF的就不是关系型数据库</p><h4 id="依赖关系" tabindex="-1"><a class="header-anchor" href="#依赖关系"><span>依赖关系</span></a></h4><ul><li>部分函数依赖</li><li>完全函数依赖</li><li>传递函数依赖</li></ul><h4 id="外键和级联可能存在的问题" tabindex="-1"><a class="header-anchor" href="#外键和级联可能存在的问题"><span>外键和级联可能存在的问题</span></a></h4><ul><li>修改外键会触发级联更新，级联更新是强阻塞，存在数据库更新风暴的风险，影响数据库插入速度</li><li>每次delete或者update操作都需要考虑外键数据，测试不方便</li><li>外键和级联更新适用于单机低并发，不适合分布式、高并发、分库分表（所以应该在应用开发层面保证数据一致性）</li></ul><h2 id="sql语言" tabindex="-1"><a class="header-anchor" href="#sql语言"><span>SQL语言</span></a></h2><h4 id="dml-data-manipulation-lang" tabindex="-1"><a class="header-anchor" href="#dml-data-manipulation-lang"><span>DML（Data Manipulation lang）</span></a></h4><p>操作数据库中表的数据；可以回滚，事物提交之后才生效</p><h5 id="crud-create、read、update、delete" tabindex="-1"><a class="header-anchor" href="#crud-create、read、update、delete"><span>CRUD（create、read、update、delete）</span></a></h5><ol><li>create：insert into</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// 插入完整的行</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>属性<span class="token number">1</span>的值， 属性<span class="token number">2</span>的值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 插入行中部分属性</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>属性<span class="token number">1</span><span class="token punctuation">,</span> 属性<span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>属性<span class="token number">1</span>的值，属性<span class="token number">3</span>的值<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>read：select <ul><li>DISTINCT关键字用于查询不同的值</li><li>LIMIT限制返回的行数 <ul><li>第一个参数为起始行，从 0 开始</li><li>第二个参数为返回的总行数（如果只有一个参数就是第二个参数）</li></ul></li><li>排序 order by <ul><li>ASC</li><li>DESC</li></ul></li></ul></li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1_name<span class="token punctuation">,</span> column2_name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>

<span class="token comment">// DISTINCT</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column_name
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>

<span class="token comment">// LIMIT 查询3-5行</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// start开 len</span>

<span class="token comment">// 排序</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> column2 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分组</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> aggregate_function<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> column_name
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition <span class="token comment">// 可以省略，用于过滤原始数据</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">HAVING</span> condition <span class="token comment">// 可以省略，用于过滤分组后结果，只能和group by一起使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>update：通常和WHERE语句一起使用，锁定要修改的行</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name
<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>delete和truncate</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="where子句-可以和select、update、delete一起使用" tabindex="-1"><a class="header-anchor" href="#where子句-可以和select、update、delete一起使用"><span>where子句：可以和select、update、delete一起使用</span></a></h5><p>可以使用的操作符：</p><ul><li>IN</li><li>BETWEEN</li><li>LIKE <ul><li>只有字段是文本值时才能使用</li><li>支持两个通配符匹配选项：<code>%</code> （任何字符出现任意次数）和 <code>_</code>（任何字符出现一次）</li><li>配符位于开头处匹配会非常慢</li></ul></li></ul><h5 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>Join</span></a></h5><p>join using</p><p>join on</p><p>不同连接类型</p><ul><li>inner join：默认的join；和使用where = 语句作用相同</li><li>left join</li><li>right join</li><li>full join</li></ul><h5 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>Union</span></a></h5><p>UNION：合并结果并去除重复行</p><p>UNION ALL：不去重</p><p>一般是对查询结果（SELECT）结果进行union操作</p><h4 id="ddl-data-defined-lang" tabindex="-1"><a class="header-anchor" href="#ddl-data-defined-lang"><span>DDL（Data Defined Lang）</span></a></h4><p>操作数据库内部对象；不能回滚，操作立刻生效</p><h5 id="database" tabindex="-1"><a class="header-anchor" href="#database"><span>Database</span></a></h5><p>create、drop、use</p><h5 id="table" tabindex="-1"><a class="header-anchor" href="#table"><span>Table</span></a></h5><p>CREATE TABLE table_name [AS]</p><p>DROP TABLE</p><p>ALTER TABLE table_name ADD/DROP/MODIFY</p><h5 id="view" tabindex="-1"><a class="header-anchor" href="#view"><span>View</span></a></h5><p>基于SQL语句的结果集合的可视化表；虚拟的表，本身不包含数据，没有索引操作，其他操作和普通table一样</p><p>作用：简化复杂sql操作；只给用户访问view的权限，可以保证安全性；</p><p>用法：</p><ul><li>CREATE VIEW view_name AS (SQL语句结果)</li><li>DROP VIEW view_name</li></ul><h5 id="index" tabindex="-1"><a class="header-anchor" href="#index"><span>Index</span></a></h5><p>用法：</p><ul><li>CREATE [UNIQE] INDEX index_name ON table (column)</li><li>ALTER TABLE table_name ADD INDEX index_name(column)</li><li>ALTER TABLE table_name DROP INDEX index_name</li></ul><h5 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h5><p>表中的数据规则约束，违反数据约束的行为会被终止</p><h4 id="tcl-transaction-control" tabindex="-1"><a class="header-anchor" href="#tcl-transaction-control"><span>TCL（Transaction Control）</span></a></h4><p>事务管理</p><p>事务：一组SQL语句的集合，这些语句要么全部执行成功，要么全部执行失败。事务应该具有ACID特性</p><p>提交和回滚：</p><ul><li>MySQL默认隐式提交（每个SQL语句都被视为一个单独的事务，并在执行后立即提交） <ul><li>通过 <code>set autocommit=0</code> 可以取消自动提交，直到 <code>set autocommit=1</code> 时才提交</li><li>这个设置是针对本次连接的</li></ul></li><li>使用<code>START TRANSACTION</code> 语句时，会关闭隐式提交，直到执行 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句</li></ul><p>用法：</p><ul><li>START TRANSACTION;</li><li>SAVEPOINT savepoint_name;</li><li>ROLLBACK TO savepoint_name;</li><li>COMMIT;</li></ul><h4 id="dcl-data-control" tabindex="-1"><a class="header-anchor" href="#dcl-data-control"><span>DCL（Data Control）</span></a></h4><p>控制用户访问权限</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p>存储过程、游标、触发器</p>`,76),i=[t];function p(o,c){return s(),a("div",null,i)}const u=n(l,[["render",p],["__file","数据库基础.html.vue"]]),m=JSON.parse(`{"path":"/backend/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80.html","title":"数据库基础","lang":"zh-CN","frontmatter":{"title":"数据库基础","order":1,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"基础 关系型数据库和非关系型数据库区别 关系型数据库： 数据存储结构化，易于维护 支持ACID事务（原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability） 支持垂直扩展（使用性能更强大的服务器）、读写分离、分库分表 使用SQL，语言通用，支持复杂查询 缺点： 不灵活：固定的表结构 扩展性有限：不便...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"数据库基础"}],["meta",{"property":"og:description","content":"基础 关系型数据库和非关系型数据库区别 关系型数据库： 数据存储结构化，易于维护 支持ACID事务（原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability） 支持垂直扩展（使用性能更强大的服务器）、读写分离、分库分表 使用SQL，语言通用，支持复杂查询 缺点： 不灵活：固定的表结构 扩展性有限：不便..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"关系型数据库和非关系型数据库区别","slug":"关系型数据库和非关系型数据库区别","link":"#关系型数据库和非关系型数据库区别","children":[]},{"level":3,"title":"非关系型数据库类型","slug":"非关系型数据库类型","link":"#非关系型数据库类型","children":[]},{"level":3,"title":"三个范式","slug":"三个范式","link":"#三个范式","children":[]}]},{"level":2,"title":"SQL语言","slug":"sql语言","link":"#sql语言","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":4.26,"words":1278},"filePathRelative":"backend/database/数据库基础.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{u as comp,m as data};
