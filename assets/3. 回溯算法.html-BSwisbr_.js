import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-BNO0IUoW.js";const e={},p=t(`<h1 id="回溯算法" tabindex="-1"><a class="header-anchor" href="#回溯算法"><span>回溯算法</span></a></h1><p>遍历路径，收集所有合法答案（其实就是究极穷举）</p><p>站在回溯树的一个节点上，需要思考 3 个问题：</p><p>1、路径：已经做出的选择。</p><p>2、选择列表：当前可以做的选择。</p><p>3、结束条件：到达决策树底层，无法再做选择的条件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>定义全局的结果记录res
定义track记录选择（记录路径）

def <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
		
		<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> res<span class="token punctuation">;</span>

def <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>满足结束条件<span class="token punctuation">)</span><span class="token operator">:</span>
				res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> 选择 in 选择列表<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>该选择不可用<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 继续尝试下一个选择！不是return</span>

        将该选择从选择列表移除<span class="token operator">/</span>设置为不可用
        track<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>选择<span class="token punctuation">)</span>
          
        <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>
          
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        将该选择重新加入选择列表<span class="token operator">/</span>设置为可用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全排列" tabindex="-1"><a class="header-anchor" href="#全排列"><span>全排列</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> track <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>track<span class="token punctuation">,</span>used<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> track<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            track<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
            track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段回溯算法的代码中，<code>res.add(new LinkedList(track))</code> 之所以使用 <code>new LinkedList(track)</code>，而不是直接使用 <code>res.add(track)</code>，是为了避免后续对 <code>track</code> 的修改影响到 <code>res</code> 中已经添加的结果。</p><p>Java中的<code>LinkedList</code>是一个引用类型，如果直接使用 <code>res.add(track)</code>，则实际上是将 <code>track</code> 对象的引用添加到 <code>res</code> 中，而不是添加 <code>track</code> 的拷贝。这样的话，后续对 <code>track</code> 的修改会影响到 <code>res</code> 中已经添加的元素。</p><h3 id="n皇后" tabindex="-1"><a class="header-anchor" href="#n皇后"><span>N皇后</span></a></h3><p>要注意StringBuilder的使用</p><p>isValid函数判断当前选择是否可用</p><h2 id="排列组合子集问题" tabindex="-1"><a class="header-anchor" href="#排列组合子集问题"><span>排列组合子集问题</span></a></h2><p>三种问题分别有三种情况：（一共九种问题）</p><ol><li>给定元素不重复，不可复选</li><li>给定元素可重复，不可复选</li><li>给定元素可重复，可复选</li></ol><p>子集</p><ol><li>使用start来控制，按照顺序遍历；没有结束条件</li><li>在子集-1的基础上，先对数组排序，添加选择是否可用的判断，让相同的元素挨在一起，如果nums[i] == nums[i - 1] 则不满足选择条件（去除重复）</li></ol><p>组合：</p><ol><li><strong>大小为 <code>k</code> 的组合就是大小为 <code>k</code> 的子集</strong>，求C(n, k)，就是求[1,... n]集合中所有大小为k的子集（在子集-1的基础上，添加结束条件判断）</li><li>在子集-2的基础上，添加结束条件（达到目标和，添加到res；剪枝：超过目标和直接结束）</li><li>在组合-2的基础上，backtrack的参数start输入从start + 1 变为 i （i的初始化还是start，这样可以保证不会出现排列不同的相同组合，但是又可以重复选择当前元素）</li></ol><p>排列：排列问题的结束条件均为<code>track.size() == nums.length</code></p><ol><li><p>选择条件：使用used数组标记是否使用</p></li><li><p>在排列-1的基础上，先对数组排序，添加了一句选择条件（额外的剪枝逻辑）去除重复：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只有当前一个相同元素用过之后，才能选择后一个相同元素。这样保证了重复元素之间出现的相对顺序（不会把不同元素在不同位置出现作为新的排列）</p></li><li><p>可以重复选的话，去掉used即可</p></li></ol><h3 id="lucky-numbers" tabindex="-1"><a class="header-anchor" href="#lucky-numbers"><span>lucky numbers</span></a></h3><p>数组A中给定可以使用的数(1~9)，返回由A数组中的元素组成的小于给定n的最大数。例如A={1, 2, 4, 9}，x=2533，返回2499</p><ul><li>回溯</li></ul><h3 id="阅读的参考文献" tabindex="-1"><a class="header-anchor" href="#阅读的参考文献"><span>阅读的参考文献</span></a></h3><p>[1] <a href="https://labuladong.online/algo/essential-technique/backtrack-framework/" target="_blank" rel="noopener noreferrer">回溯算法解题套路框架</a></p><p>[2] <a href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/" target="_blank" rel="noopener noreferrer">回溯算法秒杀所有排列-组合-子集问题</a></p>`,29),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","3. 回溯算法.html.vue"]]),d=JSON.parse(`{"path":"/algorithm/Hot100/3.%20%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html","title":"回溯算法","lang":"zh-CN","frontmatter":{"title":"回溯算法","order":5,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"回溯算法 遍历路径，收集所有合法答案（其实就是究极穷举） 站在回溯树的一个节点上，需要思考 3 个问题： 1、路径：已经做出的选择。 2、选择列表：当前可以做的选择。 3、结束条件：到达决策树底层，无法再做选择的条件。 全排列 在这段回溯算法的代码中，res.add(new LinkedList(track)) 之所以使用 new LinkedList...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/algorithm/Hot100/3.%20%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"回溯算法"}],["meta",{"property":"og:description","content":"回溯算法 遍历路径，收集所有合法答案（其实就是究极穷举） 站在回溯树的一个节点上，需要思考 3 个问题： 1、路径：已经做出的选择。 2、选择列表：当前可以做的选择。 3、结束条件：到达决策树底层，无法再做选择的条件。 全排列 在这段回溯算法的代码中，res.add(new LinkedList(track)) 之所以使用 new LinkedList..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-08T15:57:49.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-09-08T15:57:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回溯算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-08T15:57:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":3,"title":"全排列","slug":"全排列","link":"#全排列","children":[]},{"level":3,"title":"N皇后","slug":"n皇后","link":"#n皇后","children":[]},{"level":2,"title":"排列组合子集问题","slug":"排列组合子集问题","link":"#排列组合子集问题","children":[{"level":3,"title":"lucky numbers","slug":"lucky-numbers","link":"#lucky-numbers","children":[]},{"level":3,"title":"阅读的参考文献","slug":"阅读的参考文献","link":"#阅读的参考文献","children":[]}]}],"git":{"createdTime":1715670016000,"updatedTime":1725811069000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":3}]},"readingTime":{"minutes":3.32,"words":995},"filePathRelative":"algorithm/Hot100/3. 回溯算法.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{r as comp,d as data};
