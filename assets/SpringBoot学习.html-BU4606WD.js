import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,d as s}from"./app-mxWX-y-j.js";const o={},t=s(`<h1 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span>Spring Boot</span></a></h1><p>修改pom.xml文件后需要刷新maven</p><p>查看依赖树形结构：<code>mvn dependency:tree</code></p><p>![image-20240410163359218](/Users/nikki/Library/Application Support/typora-user-images/image-20240410163359218.png)</p><p>所有的springboot的依赖都是使用<code>spring-boot-starter</code>开头的</p><ol><li><p><code>spring-boot-starter-parent</code> 提供了默认配置，里面提供了 <code>dependency-management</code>模块用来管理，这样之后定义的依赖如果在这里面也有，没有提供版本号的情况默认使用<code>dependency-management</code>里面的版本号（目的就是简化配置，毕竟配版本号真的很麻烦，配过的都懂...）</p></li><li><p>web依赖：集成了tomcat、servlet、Spring MVC，实现HTTP接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="依赖注入基本知识" tabindex="-1"><a class="header-anchor" href="#依赖注入基本知识"><span>依赖注入基本知识</span></a></h2><p>推荐注入方式是Setter注入（两种：构造函数注入or Setter注入）</p><p>推荐注入的字段是final类型</p><h2 id="注解类型" tabindex="-1"><a class="header-anchor" href="#注解类型"><span>注解类型</span></a></h2><h3 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span>Bean</span></a></h3><p><code>@Bean</code>：用于注释方法，表示该方法返回的Bean会被放入spring容器中</p><p>所有应用组件（包括<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等）都会自动注册为Spring Bean</p><h3 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication"><span>SpringBootApplication</span></a></h3><p><code>@SpringBootApplication</code>：运行入口，包含了 <code>@ComponentScan</code></p><ul><li><code>@ComponentScan</code>：定义扫描的路径并从中找出标识了需要装配的类，将这些类装配到spring的bean容器中</li></ul><h3 id="aspect" tabindex="-1"><a class="header-anchor" href="#aspect"><span>Aspect</span></a></h3><p><code>@Aspect</code>：把当前类标识为一个切面类供容器读取</p><h3 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>Controller</span></a></h3><p><code>@Controller</code>：处理客户端的web请求</p><ul><li><code>@RestController</code>：<code>@Controller</code>和<code>@ResponseBody</code>的组合注解，表示处理后有返回结果 <ul><li><code>@ResponseBody</code>：指示方法返回值自动序列化后作为HTTP响应内容；通常与 RESTful Web 服务一起使用，用于返回 JSON 或 XML 格式的数据</li></ul></li></ul><h3 id="requestmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping"><span>RequestMapping</span></a></h3><p><code>@RequestMapping</code> ： 提供路由信息，将 HTTP 请求映射到具体Controller类/类中处理方法的注解</p><ul><li><p>可以指定HTTP请求方法，指定这个方法只能处理特定请求</p><p><code>@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)</code></p><p>一般不用，都使用更便捷的组合注解：</p><ul><li><p><code>@GetMapping</code> ：<code>@RequestMapping(method = RequestMethod.GET)</code></p></li><li><p><code>@PostMapping</code>：<code>@RequestMapping(method = RequestMethod.POST)</code></p></li><li><p><code>@PutMapping</code>：<code>@RequestMapping(method = RequestMethod.PUT)</code></p></li></ul></li><li><p>支持请求参数和头部参数匹配（啥意思？）</p></li></ul><h3 id="请求类型参数相关注解" tabindex="-1"><a class="header-anchor" href="#请求类型参数相关注解"><span>请求类型参数相关注解：</span></a></h3><ol><li><p>请求体：一般为POST 或 PUT 请求</p><p>使用注解<code>@RequestBody</code>：将请求体中的数据转换为特定类型的 Java 对象，并作为方法的参数传递。</p><p>更详细一点就是：指示一个方法参数是一个对象，这个对象是从 HTTP 请求体中获取数据，并进行反序列化后得到的Java对象</p></li><li><p>Path类型：Path类型，<code>/{id}</code>直接跟参数</p><p>使用注解<code>@PathVariable</code> ：从请求路径URL中获取变量值，并将其映射到方法参数上；指示处理包含变量的URL请求</p></li><li><p>Query类型：<code>?key=value</code>，不需要使用注解</p><p>比如分页查询的URL为：<code>http://localhost:8080/admin/employee/page?name=string&amp;page=0&amp;pageSize=0</code></p></li></ol><h3 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired"><span>@Autowired</span></a></h3><p>如果一个Bean有多个构造函数，需要用 <code>@Autowired</code> 注解指定注入使用的构造函数</p><p><code>@Autowired</code>：在 Spring 中需要将一个 Bean 注入到另一个 Bean 中时</p><ul><li><p><code>@Autowired</code> 注解是 Spring 框架提供的，它默认按类型进行自动注入，并且支持通过 <code>@Qualifier</code> 注解来指定要注入的 Bean 的名称。</p></li><li><p><code>@Resource</code> 注解是 Java EE 提供的，它默认按名称进行自动注入，也支持通过 <code>name</code> 或 <code>type</code> 属性来指定要注入的 Bean</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;userDao&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>@Inject</code>：Java EE6提供，和 <code>@Autowired</code>类似</p></li></ul><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>@Configuration</span></a></h3><p><code>@Configuration</code> 注解通常用于定义配置类</p><ul><li><p><strong>定义第三方库的 Bean：</strong> 当你使用第三方库提供的组件时，可能需要将其配置为 Spring 托管的 Bean。你可以创建一个配置类，在其中使用 <code>@Bean</code> 注解定义这些组件的 Bean</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LibraryConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeLibraryBean</span> <span class="token function">someLibraryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeLibraryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 其他配置方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>条件化配置：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>导入其他配置类：</strong> 你可以在一个配置类中导入其他的配置类，从而将多个配置组织在一起，形成一个整体的配置。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ServiceConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 其他配置方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="lombok库" tabindex="-1"><a class="header-anchor" href="#lombok库"><span>Lombok库</span></a></h2><p><code>@Data</code>、<code>@Builder</code>、<code>@NoArgsConstructor</code> 和 <code>@AllArgsConstructor</code> 是 Lombok 库中提供的注解，用于简化 Java 类的编写。</p><ol><li><p><code>@Data</code> 注解：</p><ul><li><code>@Data</code> 注解是一个组合注解，它包含了 <code>@Getter</code>、<code>@Setter</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code> 和 <code>@RequiredArgsConstructor</code> 注解。</li><li>使用 <code>@Data</code> 注解可以自动为类生成所有属性的 Getter 和 Setter 方法、<code>toString()</code> 方法、<code>equals()</code> 方法和 <code>hashCode()</code> 方法。</li></ul></li><li><p><code>@Builder</code> 注解：</p><ul><li><p><code>@Builder</code> 注解用于构建器模式，它可以自动生成一个构建器类，用于创建对象实例。</p></li><li><p>使用 <code>@Builder</code> 注解后，Lombok 会为带有该注解的类生成一个静态内部类，该类包含了链式调用的构造器方法，用于创建对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用 Builder 构建对象;使用链式调用的方式设置了对象的属性值</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">&quot;john@example.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>@NoArgsConstructor</code> 注解：</p><ul><li><code>@NoArgsConstructor</code> 注解用于生成一个无参构造方法。</li><li>使用 <code>@NoArgsConstructor</code> 注解后，Lombok 会为类生成一个无参构造方法，用于创建对象实例。</li></ul></li><li><p><code>@AllArgsConstructor</code> 注解：</p><ul><li><code>@AllArgsConstructor</code> 注解用于生成一个包含所有参数的构造方法。</li><li>使用 <code>@AllArgsConstructor</code> 注解后，Lombok 会为类生成一个包含所有字段参数的构造方法，用于创建对象实例。</li></ul></li></ol><p>使用这些注解可以简化 Java 类的编写，减少样板代码，提高代码的可读性和可维护性。</p><h2 id="在springboot中使用mybatis" tabindex="-1"><a class="header-anchor" href="#在springboot中使用mybatis"><span>在SpringBoot中使用Mybatis</span></a></h2><p>定义一个<code>Mapper</code>接口，相当于<code>Dao</code></p><h3 id="sql语句书写有两种方式" tabindex="-1"><a class="header-anchor" href="#sql语句书写有两种方式"><span>SQL语句书写有两种方式</span></a></h3><h4 id="_1-注解" tabindex="-1"><a class="header-anchor" href="#_1-注解"><span>1. 注解</span></a></h4><ul><li><p><code>@Mapper</code>：直接在<code>Mapper</code>接口中用<code>@Mapper</code>注解的方式写在上面</p></li><li><p><code>@MapperScan</code>：在SpringBoot的启动类上面使用<code>@MapperScan</code>注解指明扫描的包路径：不能和<code>@Mapper</code>注解同时使用，否则<code>@Mapper</code>不起作用</p></li></ul><p>如果使用注解，通常不需要额外的XML配置文件，但也可以两个都用，在接口文件中写比较简单的SQL语句，在.xml文件中写动态SQL</p><p>使用<code>@Mapper</code>的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from employee where username = #{username}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Employee</span> <span class="token function">getByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-配置文件"><span>2.配置文件</span></a></h4><ol><li>需要在<code>mapper.xml</code>文件中配置namespace，路径为Mapper接口的位置</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">&quot;com.nikki.EmployeeMapper&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getAll&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;Employee&quot;</span><span class="token operator">&gt;</span>
        select <span class="token operator">*</span> from user
    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在SpringBoot的<code>application.yml</code>文件中配置上面的<code>mapper.xml</code>文件位置：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mybatis:
	<span class="token comment"># 指定上面的\`mapper.xml\`文件位置</span>
  mapper-locations: classpath:mapper/*.xml
  <span class="token comment"># 指定Java实体类的包路径：Mapper操作的对应的entity类在项目中的位置</span>
  <span class="token comment"># 这样在mapper.xml文件中就可以不用写包路径，只写类名了</span>
  type-aliases-package: com.sky.entity // 
  configuration:
    <span class="token comment"># 开启驼峰命名，开启后，MyBatis会将数据库字段名中的下划线转换为Java实体类属性名中的驼峰命名规则。</span>
    map-underscore-to-camel-case: <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-mvc的请求处理流程" tabindex="-1"><a class="header-anchor" href="#spring-mvc的请求处理流程"><span>spring mvc的请求处理流程</span></a></h2><p>Handler是@Controller和@RequestMapping注解的类</p><p>Handler Method是请求匹配的方法，是Handler里面@RequestMapping方法</p>`,53),p=[t];function i(l,c){return e(),n("div",null,p)}const u=a(o,[["render",i],["__file","SpringBoot学习.html.vue"]]),m=JSON.parse('{"path":"/backend/frameworks/SpringBoot%E5%AD%A6%E4%B9%A0.html","title":"Spring Boot","lang":"zh-CN","frontmatter":{"description":"Spring Boot 修改pom.xml文件后需要刷新maven 查看依赖树形结构：mvn dependency:tree ![image-20240410163359218](/Users/nikki/Library/Application Support/typora-user-images/image-20240410163359218.png...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/frameworks/SpringBoot%E5%AD%A6%E4%B9%A0.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Spring Boot"}],["meta",{"property":"og:description","content":"Spring Boot 修改pom.xml文件后需要刷新maven 查看依赖树形结构：mvn dependency:tree ![image-20240410163359218](/Users/nikki/Library/Application Support/typora-user-images/image-20240410163359218.png..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/Users/nikki/Library/Application Support/typora-user-images/image-20240410163359218.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/Users/nikki/Library/Application Support/typora-user-images/image-20240410163359218.png\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"依赖注入基本知识","slug":"依赖注入基本知识","link":"#依赖注入基本知识","children":[]},{"level":2,"title":"注解类型","slug":"注解类型","link":"#注解类型","children":[{"level":3,"title":"Bean","slug":"bean","link":"#bean","children":[]},{"level":3,"title":"SpringBootApplication","slug":"springbootapplication","link":"#springbootapplication","children":[]},{"level":3,"title":"Aspect","slug":"aspect","link":"#aspect","children":[]},{"level":3,"title":"Controller","slug":"controller","link":"#controller","children":[]},{"level":3,"title":"RequestMapping","slug":"requestmapping","link":"#requestmapping","children":[]},{"level":3,"title":"请求类型参数相关注解：","slug":"请求类型参数相关注解","link":"#请求类型参数相关注解","children":[]},{"level":3,"title":"@Autowired","slug":"autowired","link":"#autowired","children":[]},{"level":3,"title":"@Configuration","slug":"configuration","link":"#configuration","children":[]}]},{"level":2,"title":"Lombok库","slug":"lombok库","link":"#lombok库","children":[]},{"level":2,"title":"在SpringBoot中使用Mybatis","slug":"在springboot中使用mybatis","link":"#在springboot中使用mybatis","children":[{"level":3,"title":"SQL语句书写有两种方式","slug":"sql语句书写有两种方式","link":"#sql语句书写有两种方式","children":[]}]},{"level":2,"title":"spring mvc的请求处理流程","slug":"spring-mvc的请求处理流程","link":"#spring-mvc的请求处理流程","children":[]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":5.71,"words":1713},"filePathRelative":"backend/frameworks/SpringBoot学习.md","localizedDate":"2024年5月14日","autoDesc":true}');export{u as comp,m as data};
