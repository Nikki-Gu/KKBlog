import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as e,a,b as s,d as i}from"./app-DQsaqGl9.js";const t={},m=a("p",null,"归一化，在数据处理中也被叫做特征缩放",-1),r=a("p",null,"为什么需要归一化：面对多维特征问题的时候，我们要保证这些特征具有相近的尺度，梯度下降算法才能更快收敛",-1),p=a("p",null,"怎么做：一般会将所有特征的尺度都尽量缩放/归一化到-1到1之间。常用的两种对输入数据做归一化的方法：",-1),c=a("ul",null,[a("li",null,[s("最大最小值归一化 "),a("ul",null,[a("li",null,[a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x"),a("mo",null,"="),a("mfrac",null,[a("mrow",null,[a("mi",null,"x"),a("mo",null,"−"),a("mi",null,"μ")]),a("mrow",null,[a("msub",null,[a("mi",null,"x"),a("mrow",null,[a("mi",null,"m"),a("mi",null,"a"),a("mi",null,"x")])]),a("mo",null,"−"),a("msub",null,[a("mi",null,"x"),a("mrow",null,[a("mi",null,"m"),a("mi",null,"i"),a("mi",null,"n")])])])])]),a("annotation",{encoding:"application/x-tex"}," x = \\frac{x - \\mu}{x_{max} - x_{min}} ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"2.0963em","vertical-align":"-0.836em"}}),a("span",{class:"mord"},[a("span",{class:"mopen nulldelimiter"}),a("span",{class:"mfrac"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"1.2603em"}},[a("span",{style:{top:"-2.314em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"x"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.1514em"}},[a("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight"},"ma"),a("span",{class:"mord mathnormal mtight"},"x")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"x"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.3117em"}},[a("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight"},"min")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.23em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),a("span",{style:{top:"-3.677em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mord mathnormal"},"μ")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.836em"}},[a("span")])])])]),a("span",{class:"mclose nulldelimiter"})])])])])])])])])]),a("li",null,[s("Z-Score 归一化 "),a("ul",null,[a("li",null,[a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x"),a("mo",null,"="),a("mfrac",null,[a("mrow",null,[a("mi",null,"x"),a("mo",null,"−"),a("mi",null,"μ")]),a("mi",null,"σ")])]),a("annotation",{encoding:"application/x-tex"}," x = \\frac{x - \\mu}{\\sigma} ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.9463em","vertical-align":"-0.686em"}}),a("span",{class:"mord"},[a("span",{class:"mopen nulldelimiter"}),a("span",{class:"mfrac"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"1.2603em"}},[a("span",{style:{top:"-2.314em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"σ")])]),a("span",{style:{top:"-3.23em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),a("span",{style:{top:"-3.677em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mord mathnormal"},"μ")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.686em"}},[a("span")])])])]),a("span",{class:"mclose nulldelimiter"})])])])])])])])])])],-1),o=i(`<p>独立同分布（independent and identically distributed，i.i.d.）：一组随机变量中每个随机变量相互独立，而且每个随机变量服从相同的概率分布</p><p>除了对输入层数据的样本做归一化外，在训练的时候网络每一层的数据分布会一直发生变化[因为前面层训练参数在更新]，这种现象被称为<strong>内部协变量漂移（internal covarivate shift）[训练过程中前一层网络参数的变化导致网络中间层输入数据分布发生改变的情况]</strong></p><p>[协变量指的是，两个随机变量在变化过程中的相关程度，在这里指各层参数与输入数据之间的相关性]</p><p>因此，后续提出的各种归一化层就是为了解决中间层数据分布发生改变的问题。</p><p>为什么需要归一化，什么时候可以不用？哪些层不会影响数据分布？</p><blockquote><p>全连接层和池化层</p></blockquote><figure><img src="https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=NzY0N2M1MTliMjAxMjU5MjVlMjE1YmMwNjgyNDgwOGJfRHFGb1R3UzFOclZJNDdydlpUSVVQaXQxeXl5WGxvT1pfVG9rZW46TGwySmJ1YkRUb052UUt4N2tSRWNFUGRybllnXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="batch-normalization" tabindex="-1"><a class="header-anchor" href="#batch-normalization"><span>Batch Normalization</span></a></h2><p>对同一个batch内所有样本在同一个特征上做归一化，归一化次数等于特征维度数；均值和方差是对一个/一类特征计算</p><p>具体过程：</p><figure><img src="https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=OGQyYjYwOTgxOTY4ZmE4ZTUzYzU5MjA0MDYwOGY0ZTdfNEs2Tk1pV2c4OXBseEtDUGplRDdrOFV6cmNuVVYyMElfVG9rZW46Slo0WmJ2bWh4b0tpVXl4WmpOa2NBczhIbnFmXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>γ：缩放因子</li><li>β：平移因子</li></ul><p>这个缩放（尺度变换）和平移是BN的精髓，因为如果只是做归一化，数据分布就会被限制在正态分布下[数据在[-1, 1]的区间]，上一层学习到的信息会被削弱，使得网络的表征能力下降，影响后续网络层的学习。</p><blockquote><p>如何理会降低网络表征能力？</p><p>数据分布被限制在[-1, 1]的区间，绝大多数激活函数在这一区域中是线性增长的，不能保证对数据进行非线性变换，从而降低网络表征呢能力</p><figure><img src="https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDQ5MWQwNzQ3ZmZkYmZjYWUxNjBkN2Y1OWQ3ZjBkMTFfQ3JEN29UMTltdXhPVmF6RU9BUkxDd2dyUmNGdzJZYTdfVG9rZW46RXhCaWJRM0tab3RlaVl4VEEwdGNlT1o5bm9iXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></blockquote><p>因此BN引入两个可学习参数调整 BN 输出的均值和方差，从而解决这个问题。</p><blockquote><p>通过可学习的参数改变一下方差和均值，使得归一化的同时新的分布能更贴近数据的真实分布，保证了模型的非线性表达能力</p></blockquote><p>当</p><figure><img src="https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDY4OWIwOTYzM2EwODI4ZjYxMzNjYzBlOWE5NGMyNWJfNTB2YWFOU0h4TWtjTUtPRHJwQXBXWG55M3pvaHZSZVJfVG9rZW46QUVlQWJ6WWxMb1kxbnp4R1BVdGNWTlpubnBkXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>时，归一化后到数据将会被恢复到原始数据分布</p><h3 id="训练和测试" tabindex="-1"><a class="header-anchor" href="#训练和测试"><span>训练和测试</span></a></h3><ul><li><p>训练：学习并更新两个可学习参数[平移和缩放因子]</p></li><li><p>测试：使用训练集的全局均值和方差来标准化测试样本[通过移动平均计算得到整个训练数据集的均值和方差]，需要在训练时候保存这部分数据</p><ul><li><p>测试的时候不应该重新计算均值和方差，因为测试的时候，我们希望模型对于任意输入都有确定的输出，因此，单个样本的输出不应取决于批量归一化所需要的随机小批量中的均值和方差</p></li><li><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>moving_mean = moving_mean * momentum + batch_mean * (1 - momentum)
moving_var = moving_var * momentum + batch_var * (1 - momentum)
# momentum取0.99，值越小改变的越快，具有更大的波动性。
# 等价于如下代码
moving_mean -= (moving_mean - batch_mean) * (1 - momentum)
moving_var -= (moving_var - batch_var) * (1 - momentum)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><ol><li>解决内部协变量偏移问题[归一化+两个可学习参数]</li><li>使得梯度变平缓，解决梯度消失和爆炸问题[梯度弥散Gradient Vanishing Problem]，可以使用更大的学习率，加快学习收敛速度 <ol><li>没有 BN 时，大小不一的输入数据计算得到的结果信号大小会不断变化，容易造成梯度消失或爆炸的问题，从而直接影响模型的训练速度和精度</li></ol></li><li>使模型具有一定的正则化效果，防止过拟合，提高模型泛化能力 <ol><li>两个可学习参数相当于引入了噪声、额外的模型规则，让模型难以过拟合训练数据；</li><li>同时BN因为解决了内部协变量偏移问题，可以让模型学习效果变好，从而提高模型泛化能力</li></ol></li></ol><p>缺点：BN非常依赖Batch的大小，当Batch值很小时，计算的均值和方差不稳定。所以BN不适用于小Batch场景</p><h3 id="相关面试题" tabindex="-1"><a class="header-anchor" href="#相关面试题"><span>相关面试题</span></a></h3><p>一个卷积核对应一类特征，产出的一个feature map就是一类特征，需要对这个feature map进行归一化，求这个feature map的均值和方差；</p><p>一个通道一个均值、方差、两个可学习参数</p><h4 id="bn层的位置-为什么bn层一般用在线性层和卷积层后面-而不是放在非线性单元后" tabindex="-1"><a class="header-anchor" href="#bn层的位置-为什么bn层一般用在线性层和卷积层后面-而不是放在非线性单元后"><span>BN层的位置：为什么BN层一般用在线性层和卷积层后面，而不是放在非线性单元后</span></a></h4><p>在CNN中，BN层应该用在非线性激活函数前面，即对y=<em>Wx</em>+<em>b</em>做归一化</p><p>因为BN 放在非线性单元后会破坏激活函数的非线性性质，影响模型的训练效果</p><h4 id="bn的训练是线性的吗" tabindex="-1"><a class="header-anchor" href="#bn的训练是线性的吗"><span>BN的训练是线性的吗？</span></a></h4><p>不是线性的。</p><p>对数据进行标准化的操作包含开平方根，不是线性的；BN层还通过指数加权移动平均法来更新均值和方差，这也是非线性的</p><h4 id="bn训练时为什么不用整个训练集的均值和方差" tabindex="-1"><a class="header-anchor" href="#bn训练时为什么不用整个训练集的均值和方差"><span>BN训练时为什么不用整个训练集的均值和方差？</span></a></h4><p>因为用整个训练集的均值和方差容易过拟合，对于BN，其实就是对batch数据进行归一化到一个相同的分布，而每一批数据的均值和方差会有一定的差别，而不是固定的值，这个差别能够增加模型的鲁棒性，减少过拟合。</p><h4 id="bn层的参数量" tabindex="-1"><a class="header-anchor" href="#bn层的参数量"><span>BN层的参数量</span></a></h4><p>BN是对所有样本在同一特征上做归一化，归一化次数等于特征维度数</p><ul><li>理论上BN是对单个神经元的运算，一个神经元对应存储均值方差和两个可学习参数</li><li>在CNN中，将一整张feature map的一个channel当作一个神经元来处理[一张图的权重共享]</li></ul><h4 id="bn为什么能和cnn融合" tabindex="-1"><a class="header-anchor" href="#bn为什么能和cnn融合"><span>BN为什么能和CNN融合</span></a></h4><p>为什么要融合？节约计算资源，简化网络结构，加速推理</p><p>如何融合：首先BN可以实现为1x1卷积的形式，然后两个卷积层就可以融合在一起</p><p>何时可以融合：融合得到的卷积层[融合层]的权重和偏置要根据训练好的卷积层、BN层的参数确定，所以在测试阶段可以融合，加速推理</p><p>参考：https://nenadmarkus.com/p/fusing-batchnorm-and-conv/</p><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h4><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>def Batchmorm(x, gamma, beta, bn_param):

    #x_shape:[B,C,H,W]
    running_mean = bn_param[&#39;running_mean&#39;]
    running_var = bn_param[&#39;running_var&#39;]
    results = 0
    eps = 1e-5

    x_mean = np.mean(x, axis=(0, 2 ,3), keepdims=True)
    x_var = np.var(x, axis=(0, 2, 3), keepdims=True)
    x_normalized = (x - x_mean) / np.sqrt(x_var + eps)
    results = gamma * x_normalized + beta

    #因为在测试时是单个图片测试，这里保留训练时的均值和方差，用在后面测试时用
    runnng_mean = momentum * running_mean + (1 - momentum) * x_mean
    running_var = momentum * running_var + (1 - momentum) * x_var

    bn_param[&#39;running_mean&#39;] = running_mean
    bn_param[&#39;running_var&#39;] = running_var

    return results, bn_param
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="group-normalization" tabindex="-1"><a class="header-anchor" href="#group-normalization"><span>Group Normalization</span></a></h2><p>LN 和 IN 都可以看作是 GN 的特殊情况（LN 是 group=1 时候的 GN，IN 是 group=C 时候的GN）</p><h2 id="layer-normalization" tabindex="-1"><a class="header-anchor" href="#layer-normalization"><span>Layer Normalization</span></a></h2><p>对单个样本的所有特征做归一化，归一化次数等于样本数；均值和方差是对单个样本计算</p><p>BN层在训练过程中计算每个batch的均值和方差，然后在测试时使用训练集的总体均值和方差进行归一化，而LN层在训练和测试时都使用每个样本单独计算的均值和方差进行归一化。</p><p>作用比较：</p><ul><li>BN层可以加速模型的收敛，在深层网络中使用效果更好</li><li>BN层对于batch size较小时效果不佳，而LN层对batch size的大小不敏感[和batch无关]</li><li>LN层可以更好地处理不同样本之间的差异 <ul><li>因为不同样本序列长度不一致的时候，做BN相当于对相同位置的词向量归一化，长度不一致就无法归一化</li></ul></li><li>BN层的参数较多，需要学习每个特征的均值和方差；LN层的参数较少，只需要学习缩放和偏移因子</li></ul><h2 id="选择" tabindex="-1"><a class="header-anchor" href="#选择"><span>选择</span></a></h2><ul><li>一般说CV用BN，NLP用LN（因为样本序列长度不一致，做BN相当于对相同位置的词向量归一化，长度不一致就无法归一化）</li><li>Transformer用LN（包括ViT也是用的LN，因为实验效果好）</li><li>关注的特征信息不应该被归一化（BN放在NLP中相当于对相同位置的词做归一化）；具体还是要看实验结果来选择合适的归一化</li></ul>`,54),d=[m,r,p,c,o];function h(u,g){return e(),l("div",null,d)}const v=n(t,[["render",h],["__file","6.归一化.html.vue"]]),x=JSON.parse(`{"path":"/deeplearning/ml-basic/6.%E5%BD%92%E4%B8%80%E5%8C%96.html","title":"归一化","lang":"zh-CN","frontmatter":{"title":"归一化","order":6,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"归一化，在数据处理中也被叫做特征缩放 为什么需要归一化：面对多维特征问题的时候，我们要保证这些特征具有相近的尺度，梯度下降算法才能更快收敛 怎么做：一般会将所有特征的尺度都尽量缩放/归一化到-1到1之间。常用的两种对输入数据做归一化的方法： 最大最小值归一化 x=xmax​−xmin​x−μ​ Z-Score 归一化 x=σx−μ​ 独立同分布（ind...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/deeplearning/ml-basic/6.%E5%BD%92%E4%B8%80%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"归一化"}],["meta",{"property":"og:description","content":"归一化，在数据处理中也被叫做特征缩放 为什么需要归一化：面对多维特征问题的时候，我们要保证这些特征具有相近的尺度，梯度下降算法才能更快收敛 怎么做：一般会将所有特征的尺度都尽量缩放/归一化到-1到1之间。常用的两种对输入数据做归一化的方法： 最大最小值归一化 x=xmax​−xmin​x−μ​ Z-Score 归一化 x=σx−μ​ 独立同分布（ind..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=NzY0N2M1MTliMjAxMjU5MjVlMjE1YmMwNjgyNDgwOGJfRHFGb1R3UzFOclZJNDdydlpUSVVQaXQxeXl5WGxvT1pfVG9rZW46TGwySmJ1YkRUb052UUt4N2tSRWNFUGRybllnXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-25T10:49:33.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2025-03-25T10:49:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"归一化\\",\\"image\\":[\\"https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=NzY0N2M1MTliMjAxMjU5MjVlMjE1YmMwNjgyNDgwOGJfRHFGb1R3UzFOclZJNDdydlpUSVVQaXQxeXl5WGxvT1pfVG9rZW46TGwySmJ1YkRUb052UUt4N2tSRWNFUGRybllnXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA\\",\\"https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=OGQyYjYwOTgxOTY4ZmE4ZTUzYzU5MjA0MDYwOGY0ZTdfNEs2Tk1pV2c4OXBseEtDUGplRDdrOFV6cmNuVVYyMElfVG9rZW46Slo0WmJ2bWh4b0tpVXl4WmpOa2NBczhIbnFmXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA\\",\\"https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDQ5MWQwNzQ3ZmZkYmZjYWUxNjBkN2Y1OWQ3ZjBkMTFfQ3JEN29UMTltdXhPVmF6RU9BUkxDd2dyUmNGdzJZYTdfVG9rZW46RXhCaWJRM0tab3RlaVl4VEEwdGNlT1o5bm9iXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA\\",\\"https://pq18uqc90b.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDY4OWIwOTYzM2EwODI4ZjYxMzNjYzBlOWE5NGMyNWJfNTB2YWFOU0h4TWtjTUtPRHJwQXBXWG55M3pvaHZSZVJfVG9rZW46QUVlQWJ6WWxMb1kxbnp4R1BVdGNWTlpubnBkXzE3NDI4OTk1Nzk6MTc0MjkwMzE3OV9WNA\\"],\\"dateModified\\":\\"2025-03-25T10:49:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"Batch Normalization","slug":"batch-normalization","link":"#batch-normalization","children":[{"level":3,"title":"训练和测试","slug":"训练和测试","link":"#训练和测试","children":[]},{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"相关面试题","slug":"相关面试题","link":"#相关面试题","children":[]}]},{"level":2,"title":"Group Normalization","slug":"group-normalization","link":"#group-normalization","children":[]},{"level":2,"title":"Layer Normalization","slug":"layer-normalization","link":"#layer-normalization","children":[]},{"level":2,"title":"选择","slug":"选择","link":"#选择","children":[]}],"git":{"createdTime":1742899773000,"updatedTime":1742899773000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":7.78,"words":2333},"filePathRelative":"deeplearning/ml-basic/6.归一化.md","localizedDate":"2025年3月25日","autoDesc":true}`);export{v as comp,x as data};
