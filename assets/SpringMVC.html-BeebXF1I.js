import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as t}from"./app-DtLkQmRI.js";const s={},o=t(`<h2 id="mvc介绍" tabindex="-1"><a class="header-anchor" href="#mvc介绍"><span>MVC介绍</span></a></h2><p>将系统分为三层：</p><ul><li>View：数据视图（前端）</li><li>Controller：业务逻辑处理代码（后端）</li><li>Model：数据存储（数据库）</li></ul><p>对应Spring中的实现：</p><ul><li>Controller：控制层，处理View和Controller之间的请求和响应</li><li>Service：处理具体的业务逻辑</li><li>Dao：数据访问层（持久层），CRUD操作数据库</li></ul><p>设计原则：高内聚低耦合；解耦，分层，代码复用</p><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span><strong>请求</strong></span></a></h2><p>HTTP四大参数类型：head、query、path、body</p><p>请求参数类型：query、path、body</p><p>访问不同的路径就是发送不同的请求，请求设计需要考虑两个问题：</p><ul><li>传递：前端通过浏览器的URL传递的参数形式</li><li>接收：后端如何接收对应参数</li></ul><p>接下来来看Spring框架提供的实现。</p><h3 id="获取head" tabindex="-1"><a class="header-anchor" href="#获取head"><span>获取Head</span></a></h3><h3 id="query类型" tabindex="-1"><a class="header-anchor" href="#query类型"><span><strong>Query类型</strong></span></a></h3><p>传递：<code>?key=value</code>，key是参数名称，value是赋值</p><p>接收：<strong>名称对应，位置无关</strong>。找到方法中key对应的参数名并赋值，因此传递多个参数时参数位置不影响后端获取结果，保证名称对应即可</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>参数必须传(除boolean类型), 否则会报500错误</p><p>类型不匹配时, 会报400错误</p></div><p><strong>支持后端参数重命名</strong></p><p>使用<code>@RequestParam</code>注解，对后端参数重命名以匹配前端参数名</p><details class="hint-container details"><summary>具体例子</summary><p>前端传递了⼀个 time 给后端，而后端方法中参数名为 createtime，将方法中该参数前加上<code>@RequestParam</code>注解重命名为time。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> createtime<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><p><strong>支持数组和集合</strong></p><ul><li>传递：<code>?array=zhangsan,lisi,wangwu</code></li><li>接收：<code>public void method(String[] array)</code></li></ul><p>如果是List集合需要添加<code>@RequestParam</code>注解：</p><ul><li>传递：<code>?listParam=zhangsan,lisi,wangwu</code></li><li>接收：<code>public void method(@RequestParam List&lt;String&gt; listParam)</code></li></ul><p><strong>支持对象</strong></p><ul><li>传递：<code>?属性名=value</code></li><li>接收：将传递的属性包装为一个对象作为方法的参数传递。未传递的属性，赋默认初始值。</li></ul><h3 id="path类型" tabindex="-1"><a class="header-anchor" href="#path类型"><span>Path类型</span></a></h3><p>传递：<code>/{id}</code>，直接在路径中放入id的值，比如<code>/1</code></p><p>接收：使用注解<code>@PathVariable</code> ，从请求路径URL中直接获取变量值。同样是名称对应，位置无关，支持重命名</p><h3 id="body类型" tabindex="-1"><a class="header-anchor" href="#body类型"><span>Body类型</span></a></h3><p>传递：请求体支持多种参数格式，根据请求头中的 <code>Content-Type</code> 获取并解析。常用的是JSON格式。</p><p>接收：使用注解<code>@RequestBody</code></p><div class="hint-container info"><p class="hint-container-title">@RequestBody的作用</p><p>将请求体中的数据转换为方法中对应类型的 Java 对象，并作为方法的参数传递。</p><p>具体来说：指示一个方法参数是一个对象，这个对象是从 HTTP 请求体中获取数据，并进行反序列化后得到的Java对象</p></div><h2 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span><strong>响应</strong></span></a></h2><p>HTTP响应结果可以是数据和静态页面，还可以设置响应头部信息、状态码等</p><h3 id="返回响应数据" tabindex="-1"><a class="header-anchor" href="#返回响应数据"><span><strong>返回响应数据</strong></span></a></h3><p>使用注解<code>@ResponseBody</code>，表示方法返回值为响应数据（而不是页面），可以返回的内容：</p><ul><li>响应数据（一般为JSON格式）</li><li>HTML代码片段，可以被浏览器解析显示</li></ul><div class="hint-container info"><p class="hint-container-title">作用范围</p><p>这个注解在方法和类上都可以使用，在类上添加相当于在该类中所有方法上添加注解。</p></div><h3 id="设置头部信息" tabindex="-1"><a class="header-anchor" href="#设置头部信息"><span><strong>设置头部信息</strong></span></a></h3><p><code>@RequestMapping</code>注解支持如下头部字段属性的设置：</p><ul><li><p>value: 映射的URL</p></li><li><p>method: 请求类型, 如GET, POST等</p></li><li><p>consumes: 指定处理请求(request)的提交内容类型(Content-Type)，例如application/json,text/html;</p></li><li><p>produces: 指定返回的内容类型(Content-Type)和编码格式，仅当request请求头中的(Accept)类型中包含该指定类型才返回，比如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Params: 指定request中必须包含某些参数值时，才让该方法处理</p></li><li><p>headers: 指定request中必须包含某些指定的header值，才能让该方法处理请求</p></li></ul><hr><p>其他属性需要通过Spring MVC内置对象HttpServletResponse提供的set方法来设置<code>response.setHeader(&quot;MyHeader&quot;,&quot;MyHeaderValue&quot;);</code></p><p>比如设置状态码。Spring MVC会根据方法的返回结果自动设置响应状态码，也可以通过Spring MVC内置对象HttpServletResponse 提供的方法来指定状态码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息转换器" tabindex="-1"><a class="header-anchor" href="#消息转换器"><span>消息转换器</span></a></h2><p>Spring 根据请求的 <code>Content-Type</code> 和 <code>Accept</code> 头信息，选择合适的消息转换器来解析请求和生成响应。消息转换器是用于将Java对象转换为前端需要的格式的工具。</p><p>Spring有默认的消息转换器列表<code>List&lt;HttpMessageConverter&lt;?&gt;&gt; converters</code>，包含各种格式和Java对象相互转换的消息转换器，比如</p><ul><li><code>MappingJackson2HttpMessageConverter</code>负责JSON和Java对象的转换 <ul><li>Spring 默认的消息转换器会包含两个 <code>MappingJackson2HttpMessageConverter</code> 的实例，为什么？好像是由于SpringMVC和SpringBoot分别有两个配置类？需要去看具体实现</li></ul></li></ul><p>在 <code>WebMvcConfigurer</code> 接口中重写 <code>extendMessageConverters</code> 方法，可以扩展默认的消息转换器列表，需要添加到头部才会优先使用。</p>`,51),i=[o];function p(l,r){return n(),a("div",null,i)}const u=e(s,[["render",p],["__file","SpringMVC.html.vue"]]),h=JSON.parse(`{"path":"/backend/frameworks/SpringMVC.html","title":"SpringMVC","lang":"zh-CN","frontmatter":{"title":"SpringMVC","order":0,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"MVC介绍 将系统分为三层： View：数据视图（前端） Controller：业务逻辑处理代码（后端） Model：数据存储（数据库） 对应Spring中的实现： Controller：控制层，处理View和Controller之间的请求和响应 Service：处理具体的业务逻辑 Dao：数据访问层（持久层），CRUD操作数据库 设计原则：高内聚低耦...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/frameworks/SpringMVC.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"SpringMVC"}],["meta",{"property":"og:description","content":"MVC介绍 将系统分为三层： View：数据视图（前端） Controller：业务逻辑处理代码（后端） Model：数据存储（数据库） 对应Spring中的实现： Controller：控制层，处理View和Controller之间的请求和响应 Service：处理具体的业务逻辑 Dao：数据访问层（持久层），CRUD操作数据库 设计原则：高内聚低耦..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-17T02:34:32.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-17T02:34:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringMVC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-17T02:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"MVC介绍","slug":"mvc介绍","link":"#mvc介绍","children":[]},{"level":2,"title":"请求","slug":"请求","link":"#请求","children":[{"level":3,"title":"获取Head","slug":"获取head","link":"#获取head","children":[]},{"level":3,"title":"Query类型","slug":"query类型","link":"#query类型","children":[]},{"level":3,"title":"Path类型","slug":"path类型","link":"#path类型","children":[]},{"level":3,"title":"Body类型","slug":"body类型","link":"#body类型","children":[]}]},{"level":2,"title":"响应","slug":"响应","link":"#响应","children":[{"level":3,"title":"返回响应数据","slug":"返回响应数据","link":"#返回响应数据","children":[]},{"level":3,"title":"设置头部信息","slug":"设置头部信息","link":"#设置头部信息","children":[]}]},{"level":2,"title":"消息转换器","slug":"消息转换器","link":"#消息转换器","children":[]}],"git":{"createdTime":1715768801000,"updatedTime":1715913272000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":2}]},"readingTime":{"minutes":4.14,"words":1243},"filePathRelative":"backend/frameworks/SpringMVC.md","localizedDate":"2024年5月15日","autoDesc":true}`);export{u as comp,h as data};
