import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as l}from"./app-Bx3-ot4b.js";const i={},r=l('<h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><h3 id="反射的作用" tabindex="-1"><a class="header-anchor" href="#反射的作用"><span>反射的作用</span></a></h3><p>通过反射可以获取任意一个类的所有属性和方法，因此可以在运行时分析类以及执行类中方法</p><h3 id="反射的优缺点" tabindex="-1"><a class="header-anchor" href="#反射的优缺点"><span>反射的优缺点</span></a></h3><p>优点：更灵活，实现框架功能</p><p>缺点：安全（无法对泛型参数进行安全检查，因为这个泛型参数检查是编译器做的）；性能稍差</p><h3 id="反射的应用场景" tabindex="-1"><a class="header-anchor" href="#反射的应用场景"><span>反射的应用场景</span></a></h3><ul><li>框架的动态代理</li><li>运行时处理的注解：Spring框架中的@Value</li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>获取Class对象的方法：</p><ul><li>知道具体类：<code>TargetObject.class;</code> 不会初始化</li><li>通过对象获取：<code>o.getClass();</code></li><li>传入类的全路径： <ul><li><code>Class.forName(&quot;cn.javaguide.TargetObject&quot;);</code></li><li><code>ClassLoader.getSystemClassLoader().loadClass(&quot;cn.javaguide.TargetObject&quot;);</code> 不会初始化</li></ul></li></ul><p>这里的初始化是指不会执行静态代码块</p><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h3><p>动态代码：没有实现类但是在运行期动态创建了一个接口对象的方式</p><p>动态代理：JDK提供的动态创建接口对象的方式</p><p>Mybatis的Mapper对象</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><p>定义：特殊的注释，提供一些信息在编译/运行时使用</p><p>不同处理阶段：</p><ul><li>编译阶段扫描：@Override（检测是否重写父类方法）</li><li>运行时处理：Spring框架中的@Value</li></ul>',20),n=[r];function o(s,c){return a(),t("div",null,n)}const h=e(i,[["render",o],["__file","4. 反射注解.html.vue"]]),m=JSON.parse(`{"path":"/backend/java/4.%20%E5%8F%8D%E5%B0%84%E6%B3%A8%E8%A7%A3.html","title":"反射注解","lang":"zh-CN","frontmatter":{"title":"反射注解","order":4,"copyright":"<a href=\\"https://creativecommons.org/licenses/by-nc/4.0/\\">CC BY-NC 4.0协议</a>","description":"反射 反射的作用 通过反射可以获取任意一个类的所有属性和方法，因此可以在运行时分析类以及执行类中方法 反射的优缺点 优点：更灵活，实现框架功能 缺点：安全（无法对泛型参数进行安全检查，因为这个泛型参数检查是编译器做的）；性能稍差 反射的应用场景 框架的动态代理 运行时处理的注解：Spring框架中的@Value 使用 获取Class对象的方法： 知道具...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/KKBlog/backend/java/4.%20%E5%8F%8D%E5%B0%84%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"KK's Blog"}],["meta",{"property":"og:title","content":"反射注解"}],["meta",{"property":"og:description","content":"反射 反射的作用 通过反射可以获取任意一个类的所有属性和方法，因此可以在运行时分析类以及执行类中方法 反射的优缺点 优点：更灵活，实现框架功能 缺点：安全（无法对泛型参数进行安全检查，因为这个泛型参数检查是编译器做的）；性能稍差 反射的应用场景 框架的动态代理 运行时处理的注解：Spring框架中的@Value 使用 获取Class对象的方法： 知道具..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T07:00:16.000Z"}],["meta",{"property":"article:author","content":"KK"}],["meta",{"property":"article:modified_time","content":"2024-05-14T07:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T07:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KK\\",\\"url\\":\\"https://github.com/Nikki-Gu\\"}]}"]]},"headers":[{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"反射的作用","slug":"反射的作用","link":"#反射的作用","children":[]},{"level":3,"title":"反射的优缺点","slug":"反射的优缺点","link":"#反射的优缺点","children":[]},{"level":3,"title":"反射的应用场景","slug":"反射的应用场景","link":"#反射的应用场景","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[]}],"git":{"createdTime":1715670016000,"updatedTime":1715670016000,"contributors":[{"name":"Nikki-Gu","email":"394632208@qq.com","commits":1}]},"readingTime":{"minutes":1.09,"words":326},"filePathRelative":"backend/java/4. 反射注解.md","localizedDate":"2024年5月14日","autoDesc":true}`);export{h as comp,m as data};
